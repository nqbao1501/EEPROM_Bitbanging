
bitbanging_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08002f2c  08002f2c  00003f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a8  080030a8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080030a8  080030a8  000040a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030b0  080030b0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b0  080030b0  000040b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030b4  080030b4  000040b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080030b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000364  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004c3a  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014cb  00000000  00000000  00009cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000518  00000000  00000000  0000b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003d7  00000000  00000000  0000b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002068a  00000000  00000000  0000ba87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007e5e  00000000  00000000  0002c111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c089b  00000000  00000000  00033f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f480a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018d0  00000000  00000000  000f4850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000f6120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f14 	.word	0x08002f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002f14 	.word	0x08002f14

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <DWT_Delay_us>:
#include "stm32f4xx_hal.h"

uint32_t DWT_Delay_Init(void);

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000598:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <DWT_Delay_us+0x44>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	617b      	str	r3, [r7, #20]
  uint32_t ticks_per_us = (HAL_RCC_GetHCLKFreq() / 1000000U);
 800059e:	f001 fe59 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a0c      	ldr	r2, [pc, #48]	@ (80005d8 <DWT_Delay_us+0x48>)
 80005a6:	fba2 2303 	umull	r2, r3, r2, r3
 80005aa:	0c9b      	lsrs	r3, r3, #18
 80005ac:	613b      	str	r3, [r7, #16]
  uint32_t target_ticks = au32_microseconds * ticks_per_us;
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	60fb      	str	r3, [r7, #12]

  while ((DWT->CYCCNT - au32_initial_ticks) < target_ticks);
 80005b8:	bf00      	nop
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <DWT_Delay_us+0x44>)
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d8f8      	bhi.n	80005ba <DWT_Delay_us+0x2a>
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	e0001000 	.word	0xe0001000
 80005d8:	431bde83 	.word	0x431bde83

080005dc <EEPROM_byte_write>:
extern char uart_rx_buffer[UART_RX_BUFFER_SIZE];
extern volatile uint16_t uart_rx_buffer_index ; //Số thứ tự của buffer
extern volatile uint8_t string_ready_flag ;
extern uint8_t external_msg[20];

uint8_t EEPROM_byte_write(uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60ba      	str	r2, [r7, #8]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	81fb      	strh	r3, [r7, #14]
 80005ea:	460b      	mov	r3, r1
 80005ec:	81bb      	strh	r3, [r7, #12]
 80005ee:	4613      	mov	r3, r2
 80005f0:	80fb      	strh	r3, [r7, #6]
	uint8_t returnValue;

	uint8_t *buffer;
	buffer = (uint8_t *)malloc(len + 2);
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	3302      	adds	r3, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fe38 	bl	800226c <malloc>
 80005fc:	4603      	mov	r3, r0
 80005fe:	617b      	str	r3, [r7, #20]

    if (buffer == NULL) {
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d101      	bne.n	800060a <EEPROM_byte_write+0x2e>
        return 2; // Return an error status if allocation failed
 8000606:	2302      	movs	r3, #2
 8000608:	e028      	b.n	800065c <EEPROM_byte_write+0x80>
    }

	buffer[0] = (uint8_t) ((MemAddress & 0xFF00) >> 8);
 800060a:	89bb      	ldrh	r3, [r7, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	b29b      	uxth	r3, r3
 8000610:	b2da      	uxtb	r2, r3
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t) (MemAddress & 0xFF);
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	89ba      	ldrh	r2, [r7, #12]
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	701a      	strb	r2, [r3, #0]
	memcpy(buffer + 2, pData, len);
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	3302      	adds	r3, #2
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	68b9      	ldr	r1, [r7, #8]
 8000628:	4618      	mov	r0, r3
 800062a:	f001 ffdb 	bl	80025e4 <memcpy>

	returnValue = I2C_Master_Transmit(DevAddress, buffer, len+2, 1);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	3302      	adds	r3, #2
 8000632:	b29a      	uxth	r2, r3
 8000634:	89f8      	ldrh	r0, [r7, #14]
 8000636:	2301      	movs	r3, #1
 8000638:	6979      	ldr	r1, [r7, #20]
 800063a:	f000 fb1b 	bl	8000c74 <I2C_Master_Transmit>
 800063e:	4603      	mov	r3, r0
 8000640:	74fb      	strb	r3, [r7, #19]
	free(buffer);
 8000642:	6978      	ldr	r0, [r7, #20]
 8000644:	f001 fe1a 	bl	800227c <free>
	if (returnValue != 1) return returnValue;
 8000648:	7cfb      	ldrb	r3, [r7, #19]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d001      	beq.n	8000652 <EEPROM_byte_write+0x76>
 800064e:	7cfb      	ldrb	r3, [r7, #19]
 8000650:	e004      	b.n	800065c <EEPROM_byte_write+0x80>

	//while (HAL_I2C_Master_Transmit(hi2c, DevAddress, 0, 0, HAL_MAX_DELAY) != HAL_OK);
	DWT_Delay_us(5000);
 8000652:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000656:	f7ff ff9b 	bl	8000590 <DWT_Delay_us>
	return 1;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <EEPROM_random_read>:

uint8_t EEPROM_random_read(uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len){
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60ba      	str	r2, [r7, #8]
 800066c:	461a      	mov	r2, r3
 800066e:	4603      	mov	r3, r0
 8000670:	81fb      	strh	r3, [r7, #14]
 8000672:	460b      	mov	r3, r1
 8000674:	81bb      	strh	r3, [r7, #12]
 8000676:	4613      	mov	r3, r2
 8000678:	80fb      	strh	r3, [r7, #6]
	uint8_t returnValue;
	// Chuyen MemAddress thanh 2 bit rieng biet
	uint8_t addr[2];
	addr[0] = (uint8_t) ((MemAddress & 0xFF00) >> 8);
 800067a:	89bb      	ldrh	r3, [r7, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	b29b      	uxth	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	753b      	strb	r3, [r7, #20]
	addr[1] = (uint8_t) (MemAddress & 0xFF);
 8000684:	89bb      	ldrh	r3, [r7, #12]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	757b      	strb	r3, [r7, #21]

	// Gui 2 bit dia chi qua i2c
	returnValue = I2C_Master_Transmit(DevAddress, addr, 2, 0);
 800068a:	f107 0114 	add.w	r1, r7, #20
 800068e:	89f8      	ldrh	r0, [r7, #14]
 8000690:	2300      	movs	r3, #0
 8000692:	2202      	movs	r2, #2
 8000694:	f000 faee 	bl	8000c74 <I2C_Master_Transmit>
 8000698:	4603      	mov	r3, r0
 800069a:	75fb      	strb	r3, [r7, #23]
	if (returnValue != 1)
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d001      	beq.n	80006a6 <EEPROM_random_read+0x42>
	{
		return returnValue;
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	e008      	b.n	80006b8 <EEPROM_random_read+0x54>
	}

	// Nhan lai data tu slave bang cach bat dau 1 chu ki i2c nua
	returnValue = I2C_Master_Receive(DevAddress, pData, len);
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	89fb      	ldrh	r3, [r7, #14]
 80006aa:	68b9      	ldr	r1, [r7, #8]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fb87 	bl	8000dc0 <I2C_Master_Receive>
 80006b2:	4603      	mov	r3, r0
 80006b4:	75fb      	strb	r3, [r7, #23]
	return returnValue;
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <EEPROM_write_string>:

uint8_t EEPROM_write_string(uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	@ 0x30
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60ba      	str	r2, [r7, #8]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4603      	mov	r3, r0
 80006cc:	81fb      	strh	r3, [r7, #14]
 80006ce:	460b      	mov	r3, r1
 80006d0:	81bb      	strh	r3, [r7, #12]
 80006d2:	4613      	mov	r3, r2
 80006d4:	80fb      	strh	r3, [r7, #6]
	uint16_t len_quotient = len / 64;
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	099b      	lsrs	r3, r3, #6
 80006da:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t len_remainder = len % 64;
 80006dc:	88fb      	ldrh	r3, [r7, #6]
 80006de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006e2:	843b      	strh	r3, [r7, #32]
	uint16_t addr_quotient = MemAddress / 64;
 80006e4:	89bb      	ldrh	r3, [r7, #12]
 80006e6:	099b      	lsrs	r3, r3, #6
 80006e8:	83fb      	strh	r3, [r7, #30]
	uint16_t addr_remainder = MemAddress % 64;
 80006ea:	89bb      	ldrh	r3, [r7, #12]
 80006ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006f0:	83bb      	strh	r3, [r7, #28]
	uint8_t returnValue;

	//Nếu địa chỉ viết bắt đầu chia hết cho 64 byte -> cứ viết từng chunk 64 byte đến khi nào hết thì thôi.
	if (addr_remainder == 0)
 80006f2:	8bbb      	ldrh	r3, [r7, #28]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d133      	bne.n	8000760 <EEPROM_write_string+0xa0>
	{
		for (int i = 0; i < len_quotient; i++){
 80006f8:	2300      	movs	r3, #0
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006fc:	e016      	b.n	800072c <EEPROM_write_string+0x6c>
			returnValue = EEPROM_byte_write(DevAddress, MemAddress, &pData[i*64], 64);
 80006fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000700:	019b      	lsls	r3, r3, #6
 8000702:	461a      	mov	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	441a      	add	r2, r3
 8000708:	89b9      	ldrh	r1, [r7, #12]
 800070a:	89f8      	ldrh	r0, [r7, #14]
 800070c:	2340      	movs	r3, #64	@ 0x40
 800070e:	f7ff ff65 	bl	80005dc <EEPROM_byte_write>
 8000712:	4603      	mov	r3, r0
 8000714:	767b      	strb	r3, [r7, #25]
			if (returnValue != 1) return returnValue;
 8000716:	7e7b      	ldrb	r3, [r7, #25]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d001      	beq.n	8000720 <EEPROM_write_string+0x60>
 800071c:	7e7b      	ldrb	r3, [r7, #25]
 800071e:	e089      	b.n	8000834 <EEPROM_write_string+0x174>
			MemAddress += 64;
 8000720:	89bb      	ldrh	r3, [r7, #12]
 8000722:	3340      	adds	r3, #64	@ 0x40
 8000724:	81bb      	strh	r3, [r7, #12]
		for (int i = 0; i < len_quotient; i++){
 8000726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000728:	3301      	adds	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800072c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800072e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000730:	429a      	cmp	r2, r3
 8000732:	dbe4      	blt.n	80006fe <EEPROM_write_string+0x3e>

		}
		if (len_remainder > 0){
 8000734:	8c3b      	ldrh	r3, [r7, #32]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d010      	beq.n	800075c <EEPROM_write_string+0x9c>
			returnValue = EEPROM_byte_write(DevAddress, MemAddress, &pData[len_quotient*64], len_remainder);
 800073a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800073c:	019b      	lsls	r3, r3, #6
 800073e:	461a      	mov	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	441a      	add	r2, r3
 8000744:	8c3b      	ldrh	r3, [r7, #32]
 8000746:	89b9      	ldrh	r1, [r7, #12]
 8000748:	89f8      	ldrh	r0, [r7, #14]
 800074a:	f7ff ff47 	bl	80005dc <EEPROM_byte_write>
 800074e:	4603      	mov	r3, r0
 8000750:	767b      	strb	r3, [r7, #25]
			if (returnValue !=1) return returnValue;
 8000752:	7e7b      	ldrb	r3, [r7, #25]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d001      	beq.n	800075c <EEPROM_write_string+0x9c>
 8000758:	7e7b      	ldrb	r3, [r7, #25]
 800075a:	e06b      	b.n	8000834 <EEPROM_write_string+0x174>
		}
		return 1;
 800075c:	2301      	movs	r3, #1
 800075e:	e069      	b.n	8000834 <EEPROM_write_string+0x174>
	}
	//Nếu địa chỉ viết bắt đầu không chia hết cho 64 byte -> viết tới chỗ chia hết 64 byte, viết theo chuck 64 byte, rồi viết đống còn lại
	else{
		uint16_t next_page_break = 64*(addr_quotient + 1);
 8000760:	8bfb      	ldrh	r3, [r7, #30]
 8000762:	3301      	adds	r3, #1
 8000764:	b29b      	uxth	r3, r3
 8000766:	019b      	lsls	r3, r3, #6
 8000768:	837b      	strh	r3, [r7, #26]
		uint16_t chunk1_len = next_page_break - MemAddress;
 800076a:	8b7a      	ldrh	r2, [r7, #26]
 800076c:	89bb      	ldrh	r3, [r7, #12]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	857b      	strh	r3, [r7, #42]	@ 0x2a
		if (chunk1_len > len){
 8000772:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d901      	bls.n	800077e <EEPROM_write_string+0xbe>
			chunk1_len = len;
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	857b      	strh	r3, [r7, #42]	@ 0x2a
		}

		//Viet toi cho chia het 64 byte
		returnValue = EEPROM_byte_write(DevAddress, MemAddress, pData, chunk1_len);
 800077e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000780:	89b9      	ldrh	r1, [r7, #12]
 8000782:	89f8      	ldrh	r0, [r7, #14]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	f7ff ff29 	bl	80005dc <EEPROM_byte_write>
 800078a:	4603      	mov	r3, r0
 800078c:	767b      	strb	r3, [r7, #25]
		if (returnValue != 1) return returnValue;
 800078e:	7e7b      	ldrb	r3, [r7, #25]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d001      	beq.n	8000798 <EEPROM_write_string+0xd8>
 8000794:	7e7b      	ldrb	r3, [r7, #25]
 8000796:	e04d      	b.n	8000834 <EEPROM_write_string+0x174>
		MemAddress += chunk1_len;
 8000798:	89ba      	ldrh	r2, [r7, #12]
 800079a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800079c:	4413      	add	r3, r2
 800079e:	81bb      	strh	r3, [r7, #12]

		//Viet theo nhung chunk 64 byte
		uint16_t remaining_len_quotient = (len - chunk1_len) / 64;
 80007a0:	88fa      	ldrh	r2, [r7, #6]
 80007a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da00      	bge.n	80007ac <EEPROM_write_string+0xec>
 80007aa:	333f      	adds	r3, #63	@ 0x3f
 80007ac:	119b      	asrs	r3, r3, #6
 80007ae:	82fb      	strh	r3, [r7, #22]
		uint16_t remaining_len_remainder = (len - chunk1_len) % 64;
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	425a      	negs	r2, r3
 80007b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80007bc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80007c0:	bf58      	it	pl
 80007c2:	4253      	negpl	r3, r2
 80007c4:	82bb      	strh	r3, [r7, #20]
		for (int i = 0; i < remaining_len_quotient; i++){
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ca:	e018      	b.n	80007fe <EEPROM_write_string+0x13e>
			returnValue = EEPROM_byte_write( DevAddress, MemAddress, &pData[i*64 + chunk1_len], 64);
 80007cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ce:	019a      	lsls	r2, r3, #6
 80007d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80007d2:	4413      	add	r3, r2
 80007d4:	461a      	mov	r2, r3
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	441a      	add	r2, r3
 80007da:	89b9      	ldrh	r1, [r7, #12]
 80007dc:	89f8      	ldrh	r0, [r7, #14]
 80007de:	2340      	movs	r3, #64	@ 0x40
 80007e0:	f7ff fefc 	bl	80005dc <EEPROM_byte_write>
 80007e4:	4603      	mov	r3, r0
 80007e6:	767b      	strb	r3, [r7, #25]
			if (returnValue != 1) return returnValue;
 80007e8:	7e7b      	ldrb	r3, [r7, #25]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d001      	beq.n	80007f2 <EEPROM_write_string+0x132>
 80007ee:	7e7b      	ldrb	r3, [r7, #25]
 80007f0:	e020      	b.n	8000834 <EEPROM_write_string+0x174>
			MemAddress += 64;
 80007f2:	89bb      	ldrh	r3, [r7, #12]
 80007f4:	3340      	adds	r3, #64	@ 0x40
 80007f6:	81bb      	strh	r3, [r7, #12]
		for (int i = 0; i < remaining_len_quotient; i++){
 80007f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fa:	3301      	adds	r3, #1
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80007fe:	8afb      	ldrh	r3, [r7, #22]
 8000800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000802:	429a      	cmp	r2, r3
 8000804:	dbe2      	blt.n	80007cc <EEPROM_write_string+0x10c>
		}

		//Neu con thua lai phan khong phai 64 byte, viet tiep
		if (remaining_len_remainder > 0){
 8000806:	8abb      	ldrh	r3, [r7, #20]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d012      	beq.n	8000832 <EEPROM_write_string+0x172>
			returnValue = EEPROM_byte_write(DevAddress, MemAddress, &pData[remaining_len_quotient*64 + chunk1_len], remaining_len_remainder);
 800080c:	8afb      	ldrh	r3, [r7, #22]
 800080e:	019a      	lsls	r2, r3, #6
 8000810:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000812:	4413      	add	r3, r2
 8000814:	461a      	mov	r2, r3
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	441a      	add	r2, r3
 800081a:	8abb      	ldrh	r3, [r7, #20]
 800081c:	89b9      	ldrh	r1, [r7, #12]
 800081e:	89f8      	ldrh	r0, [r7, #14]
 8000820:	f7ff fedc 	bl	80005dc <EEPROM_byte_write>
 8000824:	4603      	mov	r3, r0
 8000826:	767b      	strb	r3, [r7, #25]
			if (returnValue != 1) return returnValue;
 8000828:	7e7b      	ldrb	r3, [r7, #25]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d001      	beq.n	8000832 <EEPROM_write_string+0x172>
 800082e:	7e7b      	ldrb	r3, [r7, #25]
 8000830:	e000      	b.n	8000834 <EEPROM_write_string+0x174>
		}
		return 1;
 8000832:	2301      	movs	r3, #1

	}



}
 8000834:	4618      	mov	r0, r3
 8000836:	3730      	adds	r7, #48	@ 0x30
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <UART_Receive_String_Blocking>:

void UART_Receive_String_Blocking(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	uart_rx_buffer_index = 0;
 8000842:	4b3e      	ldr	r3, [pc, #248]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 8000844:	2200      	movs	r2, #0
 8000846:	801a      	strh	r2, [r3, #0]
	string_ready_flag = 0;
 8000848:	4b3d      	ldr	r3, [pc, #244]	@ (8000940 <UART_Receive_String_Blocking+0x104>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
	memset(uart_rx_buffer, 0, UART_RX_BUFFER_SIZE);
 800084e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000852:	2100      	movs	r1, #0
 8000854:	483b      	ldr	r0, [pc, #236]	@ (8000944 <UART_Receive_String_Blocking+0x108>)
 8000856:	f001 fe6d 	bl	8002534 <memset>
	while(1){
		uint8_t current_byte;
		UART_Receive(&current_byte, 1);
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fd12 	bl	8001288 <UART_Receive>
		UART_Transmit(&current_byte, 1);
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	2101      	movs	r1, #1
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fcc7 	bl	80011fc <UART_Transmit>
		if (current_byte == '\r' || current_byte == '\n'){
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b0d      	cmp	r3, #13
 8000872:	d002      	beq.n	800087a <UART_Receive_String_Blocking+0x3e>
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b0a      	cmp	r3, #10
 8000878:	d121      	bne.n	80008be <UART_Receive_String_Blocking+0x82>
			char newline[] = "\r\n";
 800087a:	4a33      	ldr	r2, [pc, #204]	@ (8000948 <UART_Receive_String_Blocking+0x10c>)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	8019      	strh	r1, [r3, #0]
 8000884:	3302      	adds	r3, #2
 8000886:	0c12      	lsrs	r2, r2, #16
 8000888:	701a      	strb	r2, [r3, #0]
			UART_Transmit((uint8_t*)newline, strlen(newline));
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fca9 	bl	80001e4 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	b29a      	uxth	r2, r3
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fcae 	bl	80011fc <UART_Transmit>
			uart_rx_buffer[uart_rx_buffer_index] = '\0';
 80008a0:	4b26      	ldr	r3, [pc, #152]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <UART_Receive_String_Blocking+0x108>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	5499      	strb	r1, [r3, r2]
			string_ready_flag = 1;
 80008ae:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <UART_Receive_String_Blocking+0x104>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
			uart_rx_buffer_index = 0;
 80008b4:	4b21      	ldr	r3, [pc, #132]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	801a      	strh	r2, [r3, #0]
			break;
 80008ba:	bf00      	nop
			uart_rx_buffer[uart_rx_buffer_index++] = current_byte;

		}

	}
}
 80008bc:	e03a      	b.n	8000934 <UART_Receive_String_Blocking+0xf8>
		else if (current_byte == '\b' || current_byte == 127){
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	d002      	beq.n	80008ca <UART_Receive_String_Blocking+0x8e>
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80008c8:	d120      	bne.n	800090c <UART_Receive_String_Blocking+0xd0>
			if (uart_rx_buffer_index > 0){
 80008ca:	4b1c      	ldr	r3, [pc, #112]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d02d      	beq.n	8000930 <UART_Receive_String_Blocking+0xf4>
				uart_rx_buffer_index--;
 80008d4:	4b19      	ldr	r3, [pc, #100]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	3b01      	subs	r3, #1
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 80008e0:	801a      	strh	r2, [r3, #0]
				uart_rx_buffer[uart_rx_buffer_index] = '\0';
 80008e2:	4b16      	ldr	r3, [pc, #88]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <UART_Receive_String_Blocking+0x108>)
 80008ec:	2100      	movs	r1, #0
 80008ee:	5499      	strb	r1, [r3, r2]
				char back_space[] = "\b \b";
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <UART_Receive_String_Blocking+0x110>)
 80008f2:	603b      	str	r3, [r7, #0]
				UART_Transmit((uint8_t*) back_space, strlen(back_space));
 80008f4:	463b      	mov	r3, r7
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc74 	bl	80001e4 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	463b      	mov	r3, r7
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fc79 	bl	80011fc <UART_Transmit>
 800090a:	e7a6      	b.n	800085a <UART_Receive_String_Blocking+0x1e>
		else if (uart_rx_buffer_index < UART_RX_BUFFER_SIZE-1){
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	b29b      	uxth	r3, r3
 8000912:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 8000916:	d8a0      	bhi.n	800085a <UART_Receive_String_Blocking+0x1e>
			uart_rx_buffer[uart_rx_buffer_index++] = current_byte;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b29b      	uxth	r3, r3
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	b291      	uxth	r1, r2
 8000922:	4a06      	ldr	r2, [pc, #24]	@ (800093c <UART_Receive_String_Blocking+0x100>)
 8000924:	8011      	strh	r1, [r2, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	79f9      	ldrb	r1, [r7, #7]
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <UART_Receive_String_Blocking+0x108>)
 800092c:	5499      	strb	r1, [r3, r2]
 800092e:	e794      	b.n	800085a <UART_Receive_String_Blocking+0x1e>
			continue;
 8000930:	bf00      	nop
	while(1){
 8000932:	e792      	b.n	800085a <UART_Receive_String_Blocking+0x1e>
}
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000026c 	.word	0x2000026c
 8000940:	2000026e 	.word	0x2000026e
 8000944:	20000078 	.word	0x20000078
 8000948:	08002f2c 	.word	0x08002f2c
 800094c:	00082008 	.word	0x00082008

08000950 <process_UART_command>:

void process_UART_command(){
 8000950:	b580      	push	{r7, lr}
 8000952:	f5ad 6dc1 	sub.w	sp, sp, #1544	@ 0x608
 8000956:	af02      	add	r7, sp, #8
	if (!string_ready_flag) return;
 8000958:	4b60      	ldr	r3, [pc, #384]	@ (8000adc <process_UART_command+0x18c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 80ae 	beq.w	8000ac0 <process_UART_command+0x170>
	string_ready_flag = 0;
 8000964:	4b5d      	ldr	r3, [pc, #372]	@ (8000adc <process_UART_command+0x18c>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
	char command_name[10];
	char dev_address[10];
	char mem_address[10];
	char fourth_part[400];
	char command_string[UART_RX_BUFFER_SIZE];
	strncpy(command_string, (char*) uart_rx_buffer, UART_RX_BUFFER_SIZE);
 800096a:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 800096e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000972:	495b      	ldr	r1, [pc, #364]	@ (8000ae0 <process_UART_command+0x190>)
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fde5 	bl	8002544 <strncpy>

	int initial_parsing = sscanf(command_string, "%s %s %s", command_name, dev_address, mem_address);
 800097a:	f207 51cc 	addw	r1, r7, #1484	@ 0x5cc
 800097e:	f507 62bb 	add.w	r2, r7, #1496	@ 0x5d8
 8000982:	f507 700f 	add.w	r0, r7, #572	@ 0x23c
 8000986:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	460b      	mov	r3, r1
 800098e:	4955      	ldr	r1, [pc, #340]	@ (8000ae4 <process_UART_command+0x194>)
 8000990:	f001 fda4 	bl	80024dc <siscanf>
 8000994:	f8c7 05fc 	str.w	r0, [r7, #1532]	@ 0x5fc
	if (initial_parsing == 3){
 8000998:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 800099c:	2b03      	cmp	r3, #3
 800099e:	f040 8091 	bne.w	8000ac4 <process_UART_command+0x174>
		uint16_t dev_address_int;
		uint16_t mem_address_int;

		dev_address_int = (uint16_t) strtoul(dev_address, NULL, 0);
 80009a2:	f207 53cc 	addw	r3, r7, #1484	@ 0x5cc
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fd8c 	bl	80024c8 <strtoul>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa
		mem_address_int = (uint16_t) strtoul(mem_address, NULL, 0);
 80009b6:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fd82 	bl	80024c8 <strtoul>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f8a7 35f8 	strh.w	r3, [r7, #1528]	@ 0x5f8
		if (strcmp("WRITE", command_name) == 0){
 80009ca:	f507 63bb 	add.w	r3, r7, #1496	@ 0x5d8
 80009ce:	4619      	mov	r1, r3
 80009d0:	4845      	ldr	r0, [pc, #276]	@ (8000ae8 <process_UART_command+0x198>)
 80009d2:	f7ff fbfd 	bl	80001d0 <strcmp>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d134      	bne.n	8000a46 <process_UART_command+0xf6>
			char temp_cmd[10], temp_dev[10], temp_mem[10];
			int complete_parse = sscanf(command_string, "%s %s %s \"%399[^\"]\"", temp_cmd, temp_dev, temp_mem, fourth_part);
 80009dc:	f507 7109 	add.w	r1, r7, #548	@ 0x224
 80009e0:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80009e4:	f507 700f 	add.w	r0, r7, #572	@ 0x23c
 80009e8:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	460b      	mov	r3, r1
 80009f6:	493d      	ldr	r1, [pc, #244]	@ (8000aec <process_UART_command+0x19c>)
 80009f8:	f001 fd70 	bl	80024dc <siscanf>
 80009fc:	f8c7 05ec 	str.w	r0, [r7, #1516]	@ 0x5ec

			if (complete_parse == 4){
 8000a00:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d15f      	bne.n	8000ac8 <process_UART_command+0x178>
				uint8_t* msg = (uint8_t*) fourth_part;
 8000a08:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8000a0c:	f8c7 35e8 	str.w	r3, [r7, #1512]	@ 0x5e8
				uint16_t msg_len = strlen(fourth_part) + 1;
 8000a10:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fbe5 	bl	80001e4 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	3301      	adds	r3, #1
 8000a20:	f8a7 35e6 	strh.w	r3, [r7, #1510]	@ 0x5e6

				uint8_t write_status = EEPROM_write_string(dev_address_int, mem_address_int, msg, msg_len);
 8000a24:	f8b7 35e6 	ldrh.w	r3, [r7, #1510]	@ 0x5e6
 8000a28:	f8b7 15f8 	ldrh.w	r1, [r7, #1528]	@ 0x5f8
 8000a2c:	f8b7 05fa 	ldrh.w	r0, [r7, #1530]	@ 0x5fa
 8000a30:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	@ 0x5e8
 8000a34:	f7ff fe44 	bl	80006c0 <EEPROM_write_string>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 35e5 	strb.w	r3, [r7, #1509]	@ 0x5e5

				if (write_status != 1) return;
 8000a3e:	f897 35e5 	ldrb.w	r3, [r7, #1509]	@ 0x5e5
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	e045      	b.n	8000ad2 <process_UART_command+0x182>
			else{
				//Write command thieu parameter
				return;
			}
		}
		else if (strcmp("READ", command_name) == 0){
 8000a46:	f507 63bb 	add.w	r3, r7, #1496	@ 0x5d8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4828      	ldr	r0, [pc, #160]	@ (8000af0 <process_UART_command+0x1a0>)
 8000a4e:	f7ff fbbf 	bl	80001d0 <strcmp>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d139      	bne.n	8000acc <process_UART_command+0x17c>
			char temp_cmd[10], temp_dev[10], temp_mem[10];
			int complete_parse = sscanf(command_string, "%s %s %s %s", temp_cmd, temp_dev, temp_mem, fourth_part);
 8000a58:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 8000a5c:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 8000a60:	f507 700f 	add.w	r0, r7, #572	@ 0x23c
 8000a64:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	460b      	mov	r3, r1
 8000a72:	4920      	ldr	r1, [pc, #128]	@ (8000af4 <process_UART_command+0x1a4>)
 8000a74:	f001 fd32 	bl	80024dc <siscanf>
 8000a78:	f8c7 05f4 	str.w	r0, [r7, #1524]	@ 0x5f4
			if (complete_parse == 4){
 8000a7c:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d125      	bne.n	8000ad0 <process_UART_command+0x180>

				uint16_t num_bytes_to_read = (uint16_t)strtoul(fourth_part, NULL, 0);
 8000a84:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fd1b 	bl	80024c8 <strtoul>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f8a7 35f2 	strh.w	r3, [r7, #1522]	@ 0x5f2
				uint8_t msg[500];
				uint8_t write_status = EEPROM_random_read(dev_address_int, mem_address_int, msg, num_bytes_to_read);
 8000a98:	f8b7 35f2 	ldrh.w	r3, [r7, #1522]	@ 0x5f2
 8000a9c:	463a      	mov	r2, r7
 8000a9e:	f8b7 15f8 	ldrh.w	r1, [r7, #1528]	@ 0x5f8
 8000aa2:	f8b7 05fa 	ldrh.w	r0, [r7, #1530]	@ 0x5fa
 8000aa6:	f7ff fddd 	bl	8000664 <EEPROM_random_read>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	f887 35f1 	strb.w	r3, [r7, #1521]	@ 0x5f1
				UART_Transmit(msg, num_bytes_to_read);
 8000ab0:	f8b7 25f2 	ldrh.w	r2, [r7, #1522]	@ 0x5f2
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fb9f 	bl	80011fc <UART_Transmit>
 8000abe:	e008      	b.n	8000ad2 <process_UART_command+0x182>
	if (!string_ready_flag) return;
 8000ac0:	bf00      	nop
 8000ac2:	e006      	b.n	8000ad2 <process_UART_command+0x182>
			return;
		}
	}
	else{
		//Lỗi do không đủ phần tử trong lệnh
		return;
 8000ac4:	bf00      	nop
 8000ac6:	e004      	b.n	8000ad2 <process_UART_command+0x182>
				return;
 8000ac8:	bf00      	nop
 8000aca:	e002      	b.n	8000ad2 <process_UART_command+0x182>
			return;
 8000acc:	bf00      	nop
 8000ace:	e000      	b.n	8000ad2 <process_UART_command+0x182>
				return;
 8000ad0:	bf00      	nop
	}



}
 8000ad2:	f507 67c0 	add.w	r7, r7, #1536	@ 0x600
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000026e 	.word	0x2000026e
 8000ae0:	20000078 	.word	0x20000078
 8000ae4:	08002f30 	.word	0x08002f30
 8000ae8:	08002f3c 	.word	0x08002f3c
 8000aec:	08002f44 	.word	0x08002f44
 8000af0:	08002f58 	.word	0x08002f58
 8000af4:	08002f60 	.word	0x08002f60

08000af8 <DWT_Delay_us>:
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <DWT_Delay_us+0x44>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	617b      	str	r3, [r7, #20]
  uint32_t ticks_per_us = (HAL_RCC_GetHCLKFreq() / 1000000U);
 8000b06:	f001 fba5 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b40 <DWT_Delay_us+0x48>)
 8000b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b12:	0c9b      	lsrs	r3, r3, #18
 8000b14:	613b      	str	r3, [r7, #16]
  uint32_t target_ticks = au32_microseconds * ticks_per_us;
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	fb02 f303 	mul.w	r3, r2, r3
 8000b1e:	60fb      	str	r3, [r7, #12]
  while ((DWT->CYCCNT - au32_initial_ticks) < target_ticks);
 8000b20:	bf00      	nop
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <DWT_Delay_us+0x44>)
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d8f8      	bhi.n	8000b22 <DWT_Delay_us+0x2a>
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e0001000 	.word	0xe0001000
 8000b40:	431bde83 	.word	0x431bde83

08000b44 <I2C_Start>:
 *      Author: Admin
 */

#include "i2c_bitbanging.h"

void I2C_Start(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	SDA_MODE_OUTPUT();
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <I2C_Start+0x48>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <I2C_Start+0x48>)
 8000b4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b52:	6013      	str	r3, [r2, #0]
	SCL_SET;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <I2C_Start+0x48>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b5a:	619a      	str	r2, [r3, #24]
	SDA_SET;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <I2C_Start+0x48>)
 8000b5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b62:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(t_SU_STA);
 8000b64:	2005      	movs	r0, #5
 8000b66:	f7ff ffc7 	bl	8000af8 <DWT_Delay_us>
	SDA_CLEAR;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <I2C_Start+0x48>)
 8000b6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b70:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(t_HD_STA);
 8000b72:	2005      	movs	r0, #5
 8000b74:	f7ff ffc0 	bl	8000af8 <DWT_Delay_us>
	SCL_CLEAR;
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <I2C_Start+0x48>)
 8000b7a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b7e:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(t_LOW);
 8000b80:	2005      	movs	r0, #5
 8000b82:	f7ff ffb9 	bl	8000af8 <DWT_Delay_us>

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40020400 	.word	0x40020400

08000b90 <I2C_Stop>:
void I2C_Stop(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	SDA_MODE_OUTPUT();
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <I2C_Stop+0x38>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc8 <I2C_Stop+0x38>)
 8000b9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b9e:	6013      	str	r3, [r2, #0]
	SDA_CLEAR;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <I2C_Stop+0x38>)
 8000ba2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ba6:	619a      	str	r2, [r3, #24]

	SCL_SET;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <I2C_Stop+0x38>)
 8000baa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bae:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(t_SU_STOP);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff ffa1 	bl	8000af8 <DWT_Delay_us>
	SDA_SET;
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <I2C_Stop+0x38>)
 8000bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bbc:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(t_BUF);
 8000bbe:	2005      	movs	r0, #5
 8000bc0:	f7ff ff9a 	bl	8000af8 <DWT_Delay_us>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40020400 	.word	0x40020400

08000bcc <I2C_Write_Byte>:

static uint8_t I2C_Write_Byte(uint8_t data){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	for (int i = 7; i >= 0; i--){
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e024      	b.n	8000c26 <I2C_Write_Byte+0x5a>
		if (data & (1<<i))SDA_SET;
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	fa42 f303 	asr.w	r3, r2, r3
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <I2C_Write_Byte+0x2a>
 8000bec:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <I2C_Write_Byte+0xa4>)
 8000bee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bf2:	619a      	str	r2, [r3, #24]
 8000bf4:	e003      	b.n	8000bfe <I2C_Write_Byte+0x32>
		else SDA_CLEAR;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <I2C_Write_Byte+0xa4>)
 8000bf8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bfc:	619a      	str	r2, [r3, #24]
		DWT_Delay_us(t_SU_DAT);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff ff7a 	bl	8000af8 <DWT_Delay_us>

		SCL_SET;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <I2C_Write_Byte+0xa4>)
 8000c06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c0a:	619a      	str	r2, [r3, #24]
		DWT_Delay_us(t_HIGH);
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	f7ff ff73 	bl	8000af8 <DWT_Delay_us>
		SCL_CLEAR;
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <I2C_Write_Byte+0xa4>)
 8000c14:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c18:	619a      	str	r2, [r3, #24]
		DWT_Delay_us(t_LOW);
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f7ff ff6c 	bl	8000af8 <DWT_Delay_us>
	for (int i = 7; i >= 0; i--){
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dad7      	bge.n	8000bdc <I2C_Write_Byte+0x10>
	}

	//poll for ark from slave
	SDA_SET;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <I2C_Write_Byte+0xa4>)
 8000c2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c32:	619a      	str	r2, [r3, #24]
	SCL_SET;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <I2C_Write_Byte+0xa4>)
 8000c36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3a:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(t_HIGH);
 8000c3c:	2005      	movs	r0, #5
 8000c3e:	f7ff ff5b 	bl	8000af8 <DWT_Delay_us>
	uint8_t ack = !(SDA_READ);
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <I2C_Write_Byte+0xa4>)
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf0c      	ite	eq
 8000c4e:	2301      	moveq	r3, #1
 8000c50:	2300      	movne	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	72fb      	strb	r3, [r7, #11]
	SCL_CLEAR;
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <I2C_Write_Byte+0xa4>)
 8000c58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c5c:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(t_LOW);
 8000c5e:	2005      	movs	r0, #5
 8000c60:	f7ff ff4a 	bl	8000af8 <DWT_Delay_us>
	return ack;
 8000c64:	7afb      	ldrb	r3, [r7, #11]

}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40020400 	.word	0x40020400

08000c74 <I2C_Master_Transmit>:
uint8_t I2C_Master_Transmit(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint8_t write_stop){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4603      	mov	r3, r0
 8000c82:	81fb      	strh	r3, [r7, #14]
 8000c84:	460b      	mov	r3, r1
 8000c86:	81bb      	strh	r3, [r7, #12]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71fb      	strb	r3, [r7, #7]
	//Start condition
	I2C_Start();
 8000c8c:	f7ff ff5a 	bl	8000b44 <I2C_Start>
	//Device address
	if (!I2C_Write_Byte(DevAddress)){
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff99 	bl	8000bcc <I2C_Write_Byte>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d103      	bne.n	8000ca8 <I2C_Master_Transmit+0x34>
		I2C_Stop();
 8000ca0:	f7ff ff76 	bl	8000b90 <I2C_Stop>
		return 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e01d      	b.n	8000ce4 <I2C_Master_Transmit+0x70>
	}
	//Writing Data
	for (uint16_t i = 0; i < Size; i++){
 8000ca8:	2300      	movs	r3, #0
 8000caa:	82fb      	strh	r3, [r7, #22]
 8000cac:	e010      	b.n	8000cd0 <I2C_Master_Transmit+0x5c>
		if(!I2C_Write_Byte(pData[i])){
 8000cae:	8afb      	ldrh	r3, [r7, #22]
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff88 	bl	8000bcc <I2C_Write_Byte>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d103      	bne.n	8000cca <I2C_Master_Transmit+0x56>
			I2C_Stop();
 8000cc2:	f7ff ff65 	bl	8000b90 <I2C_Stop>
			return 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e00c      	b.n	8000ce4 <I2C_Master_Transmit+0x70>
	for (uint16_t i = 0; i < Size; i++){
 8000cca:	8afb      	ldrh	r3, [r7, #22]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	82fb      	strh	r3, [r7, #22]
 8000cd0:	8afa      	ldrh	r2, [r7, #22]
 8000cd2:	89bb      	ldrh	r3, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3ea      	bcc.n	8000cae <I2C_Master_Transmit+0x3a>
		}
	}
	//Stop condition
	if (write_stop) I2C_Stop();
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <I2C_Master_Transmit+0x6e>
 8000cde:	f7ff ff57 	bl	8000b90 <I2C_Stop>

	return 1;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <I2C_Receive_Byte>:

static uint8_t I2C_Receive_Byte(uint8_t ack){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	uint8_t received_byte = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
	SDA_MODE_INPUT();
 8000cfa:	4b30      	ldr	r3, [pc, #192]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d00:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d04:	6013      	str	r3, [r2, #0]
	//Data được gửi về MSB đứng trước
	for (uint8_t i = 0; i<8; i++){
 8000d06:	2300      	movs	r3, #0
 8000d08:	73bb      	strb	r3, [r7, #14]
 8000d0a:	e022      	b.n	8000d52 <I2C_Receive_Byte+0x66>
		received_byte <<= 1;
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
		SCL_CLEAR;
 8000d12:	4b2a      	ldr	r3, [pc, #168]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d14:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d18:	619a      	str	r2, [r3, #24]
		DWT_Delay_us(5);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f7ff feec 	bl	8000af8 <DWT_Delay_us>
		SCL_SET;
 8000d20:	4b26      	ldr	r3, [pc, #152]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d26:	619a      	str	r2, [r3, #24]
		DWT_Delay_us(5);
 8000d28:	2005      	movs	r0, #5
 8000d2a:	f7ff fee5 	bl	8000af8 <DWT_Delay_us>
		received_byte |= SDA_READ;
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bf14      	ite	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	2300      	moveq	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	b25a      	sxtb	r2, r3
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i<8; i++){
 8000d4c:	7bbb      	ldrb	r3, [r7, #14]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	73bb      	strb	r3, [r7, #14]
 8000d52:	7bbb      	ldrb	r3, [r7, #14]
 8000d54:	2b07      	cmp	r3, #7
 8000d56:	d9d9      	bls.n	8000d0c <I2C_Receive_Byte+0x20>
	}
	//send ack/nack
	SCL_CLEAR;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d5a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d5e:	619a      	str	r2, [r3, #24]
	SDA_MODE_OUTPUT();
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a15      	ldr	r2, [pc, #84]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d6a:	6013      	str	r3, [r2, #0]
	if (ack) SDA_CLEAR;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d004      	beq.n	8000d7c <I2C_Receive_Byte+0x90>
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d78:	619a      	str	r2, [r3, #24]
 8000d7a:	e003      	b.n	8000d84 <I2C_Receive_Byte+0x98>
	else SDA_SET;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d82:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff feb7 	bl	8000af8 <DWT_Delay_us>


	SCL_SET;
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d90:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(5);
 8000d92:	2005      	movs	r0, #5
 8000d94:	f7ff feb0 	bl	8000af8 <DWT_Delay_us>
	SCL_CLEAR;
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000d9a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d9e:	619a      	str	r2, [r3, #24]
	DWT_Delay_us(5);
 8000da0:	2005      	movs	r0, #5
 8000da2:	f7ff fea9 	bl	8000af8 <DWT_Delay_us>

	SDA_MODE_INPUT();
 8000da6:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <I2C_Receive_Byte+0xd0>)
 8000dac:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000db0:	6013      	str	r3, [r2, #0]
	return received_byte;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <I2C_Master_Receive>:

uint8_t I2C_Master_Receive(uint16_t DevAddress, uint8_t *pData, uint16_t Size){
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	80fb      	strh	r3, [r7, #6]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	80bb      	strh	r3, [r7, #4]
	if (Size == 0) {
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d103      	bne.n	8000dde <I2C_Master_Receive+0x1e>
	    I2C_Stop();
 8000dd6:	f7ff fedb 	bl	8000b90 <I2C_Stop>
	    return 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e02e      	b.n	8000e3c <I2C_Master_Receive+0x7c>
	}
	//Start condition
	I2C_Start();
 8000dde:	f7ff feb1 	bl	8000b44 <I2C_Start>
	//Device address
	if (!I2C_Write_Byte(DevAddress + 1)){
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff feee 	bl	8000bcc <I2C_Write_Byte>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <I2C_Master_Receive+0x3e>
		I2C_Stop();
 8000df6:	f7ff fecb 	bl	8000b90 <I2C_Stop>
		return 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e01e      	b.n	8000e3c <I2C_Master_Receive+0x7c>
	}
	//Reading data
	for (uint16_t i = 0; i < Size - 1; i++){
 8000dfe:	2300      	movs	r3, #0
 8000e00:	81fb      	strh	r3, [r7, #14]
 8000e02:	e00a      	b.n	8000e1a <I2C_Master_Receive+0x5a>
		pData[i] = I2C_Receive_Byte(1); // Send ACK
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	18d4      	adds	r4, r2, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff ff6e 	bl	8000cec <I2C_Receive_Byte>
 8000e10:	4603      	mov	r3, r0
 8000e12:	7023      	strb	r3, [r4, #0]
	for (uint16_t i = 0; i < Size - 1; i++){
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	3301      	adds	r3, #1
 8000e18:	81fb      	strh	r3, [r7, #14]
 8000e1a:	89fa      	ldrh	r2, [r7, #14]
 8000e1c:	88bb      	ldrh	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbef      	blt.n	8000e04 <I2C_Master_Receive+0x44>
	}
	pData[Size-1] = I2C_Receive_Byte(0); // Send NACK
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	18d4      	adds	r4, r2, r3
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff5d 	bl	8000cec <I2C_Receive_Byte>
 8000e32:	4603      	mov	r3, r0
 8000e34:	7023      	strb	r3, [r4, #0]

	//Stop condition
	I2C_Stop();
 8000e36:	f7ff feab 	bl	8000b90 <I2C_Stop>
	return 1;
 8000e3a:	2301      	movs	r3, #1

}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f000 fa92 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f80a 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 f872 	bl	8000f38 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000e54:	f000 f8dc 	bl	8001010 <DWT_Delay_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UART_Receive_String_Blocking();
 8000e58:	f7ff fcf0 	bl	800083c <UART_Receive_String_Blocking>
	  process_UART_command();
 8000e5c:	f7ff fd78 	bl	8000950 <process_UART_command>
	  UART_Receive_String_Blocking();
 8000e60:	bf00      	nop
 8000e62:	e7f9      	b.n	8000e58 <main+0x14>

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	@ 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	2230      	movs	r2, #48	@ 0x30
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fb5e 	bl	8002534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	4b28      	ldr	r3, [pc, #160]	@ (8000f30 <SystemClock_Config+0xcc>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	4a27      	ldr	r2, [pc, #156]	@ (8000f30 <SystemClock_Config+0xcc>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e98:	4b25      	ldr	r3, [pc, #148]	@ (8000f30 <SystemClock_Config+0xcc>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <SystemClock_Config+0xd0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a21      	ldr	r2, [pc, #132]	@ (8000f34 <SystemClock_Config+0xd0>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f34 <SystemClock_Config+0xd0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ed8:	23a8      	movs	r3, #168	@ 0xa8
 8000eda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fd4f 	bl	800198c <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ef4:	f000 f886 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efc:	2302      	movs	r3, #2
 8000efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2105      	movs	r1, #5
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 ffb0 	bl	8001e7c <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f22:	f000 f86f 	bl	8001004 <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3750      	adds	r7, #80	@ 0x50
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <MX_GPIO_Init+0xc0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a28      	ldr	r2, [pc, #160]	@ (8000ff8 <MX_GPIO_Init+0xc0>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <MX_GPIO_Init+0xc0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_GPIO_Init+0xc0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a21      	ldr	r2, [pc, #132]	@ (8000ff8 <MX_GPIO_Init+0xc0>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_GPIO_Init+0xc0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2104      	movs	r1, #4
 8000f8a:	481c      	ldr	r0, [pc, #112]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f8c:	f000 fce4 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000f96:	481a      	ldr	r0, [pc, #104]	@ (8001000 <MX_GPIO_Init+0xc8>)
 8000f98:	f000 fcde 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4812      	ldr	r0, [pc, #72]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000fb4:	f000 fb34 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000fcc:	f000 fb28 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fd0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fd6:	2311      	movs	r3, #17
 8000fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_GPIO_Init+0xc8>)
 8000fea:	f000 fb19 	bl	8001620 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <DWT_Delay_Init>:
 *
 *  Created on: May 18, 2025
 *      Author: Admin
 */
#include "microsecond_delay.h"
uint32_t DWT_Delay_Init(void) {
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <DWT_Delay_Init+0x58>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	4a13      	ldr	r2, [pc, #76]	@ (8001068 <DWT_Delay_Init+0x58>)
 800101a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800101e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <DWT_Delay_Init+0x58>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4a10      	ldr	r2, [pc, #64]	@ (8001068 <DWT_Delay_Init+0x58>)
 8001026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800102a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <DWT_Delay_Init+0x5c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <DWT_Delay_Init+0x5c>)
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <DWT_Delay_Init+0x5c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <DWT_Delay_Init+0x5c>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <DWT_Delay_Init+0x5c>)
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800104a:	bf00      	nop
     __ASM volatile ("NOP");
 800104c:	bf00      	nop
  __ASM volatile ("NOP");
 800104e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <DWT_Delay_Init+0x5c>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001058:	2300      	movs	r3, #0
 800105a:	e000      	b.n	800105e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800105c:	2301      	movs	r3, #1
  }
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000edf0 	.word	0xe000edf0
 800106c:	e0001000 	.word	0xe0001000

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <HAL_MspInit+0x4c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	6453      	str	r3, [r2, #68]	@ 0x44
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	@ (80010bc <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ae:	2007      	movs	r0, #7
 80010b0:	f000 fa82 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <NMI_Handler+0x4>

080010c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <MemManage_Handler+0x4>

080010d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001116:	f000 f97d 	bl	8001414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	@ (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f001 fa1c 	bl	800258c <__errno>
 8001154:	4603      	mov	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20020000 	.word	0x20020000
 8001180:	00000400 	.word	0x00000400
 8001184:	20000270 	.word	0x20000270
 8001188:	200003c0 	.word	0x200003c0

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <SystemInit+0x20>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <SystemInit+0x20>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <DWT_Delay_us>:
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <DWT_Delay_us+0x44>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	617b      	str	r3, [r7, #20]
  uint32_t ticks_per_us = (HAL_RCC_GetHCLKFreq() / 1000000U);
 80011be:	f001 f849 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a0c      	ldr	r2, [pc, #48]	@ (80011f8 <DWT_Delay_us+0x48>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t target_ticks = au32_microseconds * ticks_per_us;
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	60fb      	str	r3, [r7, #12]
  while ((DWT->CYCCNT - au32_initial_ticks) < target_ticks);
 80011d8:	bf00      	nop
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <DWT_Delay_us+0x44>)
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f8      	bhi.n	80011da <DWT_Delay_us+0x2a>
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e0001000 	.word	0xe0001000
 80011f8:	431bde83 	.word	0x431bde83

080011fc <UART_Transmit>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
 *
 */
void UART_Transmit(uint8_t* pData, uint16_t data_len){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
	for (uint16_t i = 0; i < data_len; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	81fb      	strh	r3, [r7, #14]
 800120c:	e030      	b.n	8001270 <UART_Transmit+0x74>
		//Send start bit
		TX_CLEAR;
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <UART_Transmit+0x88>)
 8001210:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001214:	619a      	str	r2, [r3, #24]
		DWT_Delay_us(104);
 8001216:	2068      	movs	r0, #104	@ 0x68
 8001218:	f7ff ffca 	bl	80011b0 <DWT_Delay_us>

		//Send 8 bits
		uint8_t current_byte = pData[i];
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	737b      	strb	r3, [r7, #13]
		for (uint8_t j = 0; j < 8; j++){
 8001226:	2300      	movs	r3, #0
 8001228:	733b      	strb	r3, [r7, #12]
 800122a:	e015      	b.n	8001258 <UART_Transmit+0x5c>
			if (current_byte & 0x01) TX_SET;
 800122c:	7b7b      	ldrb	r3, [r7, #13]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <UART_Transmit+0x42>
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <UART_Transmit+0x88>)
 8001238:	2204      	movs	r2, #4
 800123a:	619a      	str	r2, [r3, #24]
 800123c:	e003      	b.n	8001246 <UART_Transmit+0x4a>
			else TX_CLEAR;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <UART_Transmit+0x88>)
 8001240:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001244:	619a      	str	r2, [r3, #24]
			DWT_Delay_us(104);
 8001246:	2068      	movs	r0, #104	@ 0x68
 8001248:	f7ff ffb2 	bl	80011b0 <DWT_Delay_us>
			current_byte >>=1;
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	085b      	lsrs	r3, r3, #1
 8001250:	737b      	strb	r3, [r7, #13]
		for (uint8_t j = 0; j < 8; j++){
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	3301      	adds	r3, #1
 8001256:	733b      	strb	r3, [r7, #12]
 8001258:	7b3b      	ldrb	r3, [r7, #12]
 800125a:	2b07      	cmp	r3, #7
 800125c:	d9e6      	bls.n	800122c <UART_Transmit+0x30>
		}

		//Send stop bit
		TX_SET;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <UART_Transmit+0x88>)
 8001260:	2204      	movs	r2, #4
 8001262:	619a      	str	r2, [r3, #24]
		DWT_Delay_us(104);
 8001264:	2068      	movs	r0, #104	@ 0x68
 8001266:	f7ff ffa3 	bl	80011b0 <DWT_Delay_us>
	for (uint16_t i = 0; i < data_len; i++){
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	3301      	adds	r3, #1
 800126e:	81fb      	strh	r3, [r7, #14]
 8001270:	89fa      	ldrh	r2, [r7, #14]
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	429a      	cmp	r2, r3
 8001276:	d3ca      	bcc.n	800120e <UART_Transmit+0x12>
	}
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40020000 	.word	0x40020000

08001288 <UART_Receive>:

void UART_Receive(uint8_t* pData, uint16_t data_len){
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
	uint16_t byte_index = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	82fb      	strh	r3, [r7, #22]
	while (byte_index != data_len){
 8001298:	e034      	b.n	8001304 <UART_Receive+0x7c>
		while (READ_RX);
 800129a:	bf00      	nop
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <UART_Receive+0x90>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f9      	bne.n	800129c <UART_Receive+0x14>

		DWT_Delay_us(104*1.5);
 80012a8:	209c      	movs	r0, #156	@ 0x9c
 80012aa:	f7ff ff81 	bl	80011b0 <DWT_Delay_us>
		uint8_t received_byte;
		for (int i = 0; i < 8; i++){
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	e019      	b.n	80012e8 <UART_Receive+0x60>
			uint8_t received_bit = READ_RX;
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <UART_Receive+0x90>)
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf14      	ite	ne
 80012c0:	2301      	movne	r3, #1
 80012c2:	2300      	moveq	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	73fb      	strb	r3, [r7, #15]
			received_byte |= received_bit << i;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	757b      	strb	r3, [r7, #21]
			DWT_Delay_us(104);
 80012dc:	2068      	movs	r0, #104	@ 0x68
 80012de:	f7ff ff67 	bl	80011b0 <DWT_Delay_us>
		for (int i = 0; i < 8; i++){
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3301      	adds	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	dde2      	ble.n	80012b4 <UART_Receive+0x2c>
		}
        DWT_Delay_us(104);
 80012ee:	2068      	movs	r0, #104	@ 0x68
 80012f0:	f7ff ff5e 	bl	80011b0 <DWT_Delay_us>

        pData[byte_index++] = received_byte;
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	82fa      	strh	r2, [r7, #22]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	7d7a      	ldrb	r2, [r7, #21]
 8001302:	701a      	strb	r2, [r3, #0]
	while (byte_index != data_len){
 8001304:	8afa      	ldrh	r2, [r7, #22]
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	429a      	cmp	r2, r3
 800130a:	d1c6      	bne.n	800129a <UART_Receive+0x12>

	}
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020000 	.word	0x40020000

0800131c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001354 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001320:	f7ff ff34 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	@ (8001358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	@ (800135c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	@ (8001368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f001 f925 	bl	8002598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134e:	f7ff fd79 	bl	8000e44 <main>
  bx  lr    
 8001352:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001354:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001360:	080030b8 	.word	0x080030b8
  ldr r2, =_sbss
 8001364:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001368:	200003c0 	.word	0x200003c0

0800136c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC_IRQHandler>
	...

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001374:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0d      	ldr	r2, [pc, #52]	@ (80013b0 <HAL_Init+0x40>)
 800137a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800137e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <HAL_Init+0x40>)
 8001386:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800138a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a07      	ldr	r2, [pc, #28]	@ (80013b0 <HAL_Init+0x40>)
 8001392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 f90d 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f808 	bl	80013b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a4:	f7ff fe64 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023c00 	.word	0x40023c00

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_InitTick+0x54>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_InitTick+0x58>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f917 	bl	8001606 <HAL_SYSTICK_Config>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00e      	b.n	8001400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d80a      	bhi.n	80013fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e8:	2200      	movs	r2, #0
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f000 f8ed 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f4:	4a06      	ldr	r2, [pc, #24]	@ (8001410 <HAL_InitTick+0x5c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e000      	b.n	8001400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000000 	.word	0x20000000
 800140c:	20000008 	.word	0x20000008
 8001410:	20000004 	.word	0x20000004

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	20000274 	.word	0x20000274

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000274 	.word	0x20000274

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	@ (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	@ (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	@ 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff47 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff5c 	bl	800149c <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff8e 	bl	800150c <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5d 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffb0 	bl	8001574 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	@ 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e16b      	b.n	8001914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 815a 	bne.w	800190e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d005      	beq.n	8001672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	2b02      	cmp	r3, #2
 8001670:	d130      	bne.n	80016d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 0201 	and.w	r2, r3, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d017      	beq.n	8001710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d123      	bne.n	8001764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	08da      	lsrs	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	69b9      	ldr	r1, [r7, #24]
 8001760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0203 	and.w	r2, r3, #3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80b4 	beq.w	800190e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b60      	ldr	r3, [pc, #384]	@ (800192c <HAL_GPIO_Init+0x30c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	4a5f      	ldr	r2, [pc, #380]	@ (800192c <HAL_GPIO_Init+0x30c>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b6:	4b5d      	ldr	r3, [pc, #372]	@ (800192c <HAL_GPIO_Init+0x30c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001930 <HAL_GPIO_Init+0x310>)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a52      	ldr	r2, [pc, #328]	@ (8001934 <HAL_GPIO_Init+0x314>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d02b      	beq.n	8001846 <HAL_GPIO_Init+0x226>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a51      	ldr	r2, [pc, #324]	@ (8001938 <HAL_GPIO_Init+0x318>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d025      	beq.n	8001842 <HAL_GPIO_Init+0x222>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a50      	ldr	r2, [pc, #320]	@ (800193c <HAL_GPIO_Init+0x31c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01f      	beq.n	800183e <HAL_GPIO_Init+0x21e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4f      	ldr	r2, [pc, #316]	@ (8001940 <HAL_GPIO_Init+0x320>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d019      	beq.n	800183a <HAL_GPIO_Init+0x21a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4e      	ldr	r2, [pc, #312]	@ (8001944 <HAL_GPIO_Init+0x324>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x216>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4d      	ldr	r2, [pc, #308]	@ (8001948 <HAL_GPIO_Init+0x328>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x212>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4c      	ldr	r2, [pc, #304]	@ (800194c <HAL_GPIO_Init+0x32c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x20e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4b      	ldr	r2, [pc, #300]	@ (8001950 <HAL_GPIO_Init+0x330>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x20a>
 8001826:	2307      	movs	r3, #7
 8001828:	e00e      	b.n	8001848 <HAL_GPIO_Init+0x228>
 800182a:	2308      	movs	r3, #8
 800182c:	e00c      	b.n	8001848 <HAL_GPIO_Init+0x228>
 800182e:	2306      	movs	r3, #6
 8001830:	e00a      	b.n	8001848 <HAL_GPIO_Init+0x228>
 8001832:	2305      	movs	r3, #5
 8001834:	e008      	b.n	8001848 <HAL_GPIO_Init+0x228>
 8001836:	2304      	movs	r3, #4
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x228>
 800183a:	2303      	movs	r3, #3
 800183c:	e004      	b.n	8001848 <HAL_GPIO_Init+0x228>
 800183e:	2302      	movs	r3, #2
 8001840:	e002      	b.n	8001848 <HAL_GPIO_Init+0x228>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x228>
 8001846:	2300      	movs	r3, #0
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f002 0203 	and.w	r2, r2, #3
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	4093      	lsls	r3, r2
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001858:	4935      	ldr	r1, [pc, #212]	@ (8001930 <HAL_GPIO_Init+0x310>)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001866:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <HAL_GPIO_Init+0x334>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188a:	4a32      	ldr	r2, [pc, #200]	@ (8001954 <HAL_GPIO_Init+0x334>)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001890:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <HAL_GPIO_Init+0x334>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b4:	4a27      	ldr	r2, [pc, #156]	@ (8001954 <HAL_GPIO_Init+0x334>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ba:	4b26      	ldr	r3, [pc, #152]	@ (8001954 <HAL_GPIO_Init+0x334>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018de:	4a1d      	ldr	r2, [pc, #116]	@ (8001954 <HAL_GPIO_Init+0x334>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <HAL_GPIO_Init+0x334>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001908:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <HAL_GPIO_Init+0x334>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3301      	adds	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	2b0f      	cmp	r3, #15
 8001918:	f67f ae90 	bls.w	800163c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3724      	adds	r7, #36	@ 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40013800 	.word	0x40013800
 8001934:	40020000 	.word	0x40020000
 8001938:	40020400 	.word	0x40020400
 800193c:	40020800 	.word	0x40020800
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40021000 	.word	0x40021000
 8001948:	40021400 	.word	0x40021400
 800194c:	40021800 	.word	0x40021800
 8001950:	40021c00 	.word	0x40021c00
 8001954:	40013c00 	.word	0x40013c00

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001974:	e003      	b.n	800197e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e267      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d075      	beq.n	8001a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019aa:	4b88      	ldr	r3, [pc, #544]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d00c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4b85      	ldr	r3, [pc, #532]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d112      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c2:	4b82      	ldr	r3, [pc, #520]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ce:	d10b      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d05b      	beq.n	8001a94 <HAL_RCC_OscConfig+0x108>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d157      	bne.n	8001a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e242      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f0:	d106      	bne.n	8001a00 <HAL_RCC_OscConfig+0x74>
 80019f2:	4b76      	ldr	r3, [pc, #472]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a75      	ldr	r2, [pc, #468]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x98>
 8001a0a:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6f      	ldr	r2, [pc, #444]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b6d      	ldr	r3, [pc, #436]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6c      	ldr	r2, [pc, #432]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a24:	4b69      	ldr	r3, [pc, #420]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a68      	ldr	r2, [pc, #416]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b66      	ldr	r3, [pc, #408]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a65      	ldr	r2, [pc, #404]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fcfa 	bl	800143c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fcf6 	bl	800143c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	@ 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e207      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xc0>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fce6 	bl	800143c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fce2 	bl	800143c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	@ 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1f3      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b51      	ldr	r3, [pc, #324]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0xe8>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d063      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b44      	ldr	r3, [pc, #272]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b41      	ldr	r3, [pc, #260]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1c7      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4937      	ldr	r1, [pc, #220]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <HAL_RCC_OscConfig+0x244>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff fc9b 	bl	800143c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fc97 	bl	800143c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1a8      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4925      	ldr	r1, [pc, #148]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <HAL_RCC_OscConfig+0x244>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff fc7a 	bl	800143c <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fc76 	bl	800143c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e187      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d036      	beq.n	8001be4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d016      	beq.n	8001bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_RCC_OscConfig+0x248>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff fc5a 	bl	800143c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fc56 	bl	800143c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e167      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x200>
 8001baa:	e01b      	b.n	8001be4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bac:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <HAL_RCC_OscConfig+0x248>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fc43 	bl	800143c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	e00e      	b.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff fc3f 	bl	800143c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d907      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e150      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	42470000 	.word	0x42470000
 8001bd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b88      	ldr	r3, [pc, #544]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ea      	bne.n	8001bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8097 	beq.w	8001d20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b81      	ldr	r3, [pc, #516]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b7d      	ldr	r3, [pc, #500]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c12:	4b7a      	ldr	r3, [pc, #488]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	4b77      	ldr	r3, [pc, #476]	@ (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2e:	4b74      	ldr	r3, [pc, #464]	@ (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a73      	ldr	r2, [pc, #460]	@ (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fbff 	bl	800143c <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff fbfb 	bl	800143c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e10c      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b6a      	ldr	r3, [pc, #424]	@ (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x2ea>
 8001c68:	4b64      	ldr	r3, [pc, #400]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6c:	4a63      	ldr	r2, [pc, #396]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c74:	e01c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x324>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x30c>
 8001c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	4a5e      	ldr	r2, [pc, #376]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x324>
 8001c98:	4b58      	ldr	r3, [pc, #352]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9c:	4a57      	ldr	r2, [pc, #348]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca4:	4b55      	ldr	r3, [pc, #340]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca8:	4a54      	ldr	r2, [pc, #336]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fbc0 	bl	800143c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fbbc 	bl	800143c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0cb      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd6:	4b49      	ldr	r3, [pc, #292]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0ee      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x334>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fbaa 	bl	800143c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7ff fba6 	bl	800143c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0b5      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	4b3e      	ldr	r3, [pc, #248]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ee      	bne.n	8001cec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d14:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	4a38      	ldr	r2, [pc, #224]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a1 	beq.w	8001e6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2a:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d05c      	beq.n	8001df0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d141      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b31      	ldr	r3, [pc, #196]	@ (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fb7a 	bl	800143c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff fb76 	bl	800143c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e087      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	491b      	ldr	r1, [pc, #108]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d94:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fb4f 	bl	800143c <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff fb4b 	bl	800143c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e05c      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x416>
 8001dc0:	e054      	b.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb38 	bl	800143c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff fb34 	bl	800143c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e045      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x444>
 8001dee:	e03d      	b.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e038      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000
 8001e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <HAL_RCC_OscConfig+0x4ec>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d028      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d121      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d11a      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d111      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0cc      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d90c      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b65      	ldr	r3, [pc, #404]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b63      	ldr	r3, [pc, #396]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b8      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed0:	4b59      	ldr	r3, [pc, #356]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a58      	ldr	r2, [pc, #352]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001eda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee8:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a52      	ldr	r2, [pc, #328]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b50      	ldr	r3, [pc, #320]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	494d      	ldr	r1, [pc, #308]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d044      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b47      	ldr	r3, [pc, #284]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d119      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e07f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e067      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4934      	ldr	r1, [pc, #208]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7ff fa66 	bl	800143c <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7ff fa62 	bl	800143c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e04f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d20c      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e032      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4916      	ldr	r1, [pc, #88]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fee:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	490e      	ldr	r1, [pc, #56]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002002:	f000 f821 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002006:	4602      	mov	r2, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	490a      	ldr	r1, [pc, #40]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	5ccb      	ldrb	r3, [r1, r3]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a09      	ldr	r2, [pc, #36]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f9c6 	bl	80013b4 <HAL_InitTick>

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00
 8002038:	40023800 	.word	0x40023800
 800203c:	08002f78 	.word	0x08002f78
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800204c:	b094      	sub	sp, #80	@ 0x50
 800204e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002060:	4b79      	ldr	r3, [pc, #484]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x200>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d00d      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x40>
 800206c:	2b08      	cmp	r3, #8
 800206e:	f200 80e1 	bhi.w	8002234 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x34>
 8002076:	2b04      	cmp	r3, #4
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x3a>
 800207a:	e0db      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b73      	ldr	r3, [pc, #460]	@ (800224c <HAL_RCC_GetSysClockFreq+0x204>)
 800207e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002080:	e0db      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002082:	4b73      	ldr	r3, [pc, #460]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x208>)
 8002084:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002086:	e0d8      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002088:	4b6f      	ldr	r3, [pc, #444]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x200>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002090:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002092:	4b6d      	ldr	r3, [pc, #436]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x200>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d063      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	4b6a      	ldr	r3, [pc, #424]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	2200      	movs	r2, #0
 80020a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80020aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80020b2:	2300      	movs	r3, #0
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020ba:	4622      	mov	r2, r4
 80020bc:	462b      	mov	r3, r5
 80020be:	f04f 0000 	mov.w	r0, #0
 80020c2:	f04f 0100 	mov.w	r1, #0
 80020c6:	0159      	lsls	r1, r3, #5
 80020c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020cc:	0150      	lsls	r0, r2, #5
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4621      	mov	r1, r4
 80020d4:	1a51      	subs	r1, r2, r1
 80020d6:	6139      	str	r1, [r7, #16]
 80020d8:	4629      	mov	r1, r5
 80020da:	eb63 0301 	sbc.w	r3, r3, r1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020ec:	4659      	mov	r1, fp
 80020ee:	018b      	lsls	r3, r1, #6
 80020f0:	4651      	mov	r1, sl
 80020f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020f6:	4651      	mov	r1, sl
 80020f8:	018a      	lsls	r2, r1, #6
 80020fa:	4651      	mov	r1, sl
 80020fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002100:	4659      	mov	r1, fp
 8002102:	eb63 0901 	sbc.w	r9, r3, r1
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800211a:	4690      	mov	r8, r2
 800211c:	4699      	mov	r9, r3
 800211e:	4623      	mov	r3, r4
 8002120:	eb18 0303 	adds.w	r3, r8, r3
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	462b      	mov	r3, r5
 8002128:	eb49 0303 	adc.w	r3, r9, r3
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800213a:	4629      	mov	r1, r5
 800213c:	024b      	lsls	r3, r1, #9
 800213e:	4621      	mov	r1, r4
 8002140:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002144:	4621      	mov	r1, r4
 8002146:	024a      	lsls	r2, r1, #9
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800214e:	2200      	movs	r2, #0
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002152:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002154:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002158:	f7fe f8a2 	bl	80002a0 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4613      	mov	r3, r2
 8002162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002164:	e058      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002166:	4b38      	ldr	r3, [pc, #224]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x200>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	099b      	lsrs	r3, r3, #6
 800216c:	2200      	movs	r2, #0
 800216e:	4618      	mov	r0, r3
 8002170:	4611      	mov	r1, r2
 8002172:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002176:	623b      	str	r3, [r7, #32]
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
 800217c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002180:	4642      	mov	r2, r8
 8002182:	464b      	mov	r3, r9
 8002184:	f04f 0000 	mov.w	r0, #0
 8002188:	f04f 0100 	mov.w	r1, #0
 800218c:	0159      	lsls	r1, r3, #5
 800218e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002192:	0150      	lsls	r0, r2, #5
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4641      	mov	r1, r8
 800219a:	ebb2 0a01 	subs.w	sl, r2, r1
 800219e:	4649      	mov	r1, r9
 80021a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021b8:	ebb2 040a 	subs.w	r4, r2, sl
 80021bc:	eb63 050b 	sbc.w	r5, r3, fp
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	00eb      	lsls	r3, r5, #3
 80021ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ce:	00e2      	lsls	r2, r4, #3
 80021d0:	4614      	mov	r4, r2
 80021d2:	461d      	mov	r5, r3
 80021d4:	4643      	mov	r3, r8
 80021d6:	18e3      	adds	r3, r4, r3
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	464b      	mov	r3, r9
 80021dc:	eb45 0303 	adc.w	r3, r5, r3
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ee:	4629      	mov	r1, r5
 80021f0:	028b      	lsls	r3, r1, #10
 80021f2:	4621      	mov	r1, r4
 80021f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f8:	4621      	mov	r1, r4
 80021fa:	028a      	lsls	r2, r1, #10
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002202:	2200      	movs	r2, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	61fa      	str	r2, [r7, #28]
 8002208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800220c:	f7fe f848 	bl	80002a0 <__aeabi_uldivmod>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4613      	mov	r3, r2
 8002216:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x200>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	3301      	adds	r3, #1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002228:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800222a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <HAL_RCC_GetSysClockFreq+0x204>)
 8002236:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800223c:	4618      	mov	r0, r3
 800223e:	3750      	adds	r7, #80	@ 0x50
 8002240:	46bd      	mov	sp, r7
 8002242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	00f42400 	.word	0x00f42400
 8002250:	007a1200 	.word	0x007a1200

08002254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b03      	ldr	r3, [pc, #12]	@ (8002268 <HAL_RCC_GetHCLKFreq+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000000 	.word	0x20000000

0800226c <malloc>:
 800226c:	4b02      	ldr	r3, [pc, #8]	@ (8002278 <malloc+0xc>)
 800226e:	4601      	mov	r1, r0
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	f000 b82d 	b.w	80022d0 <_malloc_r>
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c

0800227c <free>:
 800227c:	4b02      	ldr	r3, [pc, #8]	@ (8002288 <free+0xc>)
 800227e:	4601      	mov	r1, r0
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	f000 b9bd 	b.w	8002600 <_free_r>
 8002286:	bf00      	nop
 8002288:	2000000c 	.word	0x2000000c

0800228c <sbrk_aligned>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	4e0f      	ldr	r6, [pc, #60]	@ (80022cc <sbrk_aligned+0x40>)
 8002290:	460c      	mov	r4, r1
 8002292:	6831      	ldr	r1, [r6, #0]
 8002294:	4605      	mov	r5, r0
 8002296:	b911      	cbnz	r1, 800229e <sbrk_aligned+0x12>
 8002298:	f000 f968 	bl	800256c <_sbrk_r>
 800229c:	6030      	str	r0, [r6, #0]
 800229e:	4621      	mov	r1, r4
 80022a0:	4628      	mov	r0, r5
 80022a2:	f000 f963 	bl	800256c <_sbrk_r>
 80022a6:	1c43      	adds	r3, r0, #1
 80022a8:	d103      	bne.n	80022b2 <sbrk_aligned+0x26>
 80022aa:	f04f 34ff 	mov.w	r4, #4294967295
 80022ae:	4620      	mov	r0, r4
 80022b0:	bd70      	pop	{r4, r5, r6, pc}
 80022b2:	1cc4      	adds	r4, r0, #3
 80022b4:	f024 0403 	bic.w	r4, r4, #3
 80022b8:	42a0      	cmp	r0, r4
 80022ba:	d0f8      	beq.n	80022ae <sbrk_aligned+0x22>
 80022bc:	1a21      	subs	r1, r4, r0
 80022be:	4628      	mov	r0, r5
 80022c0:	f000 f954 	bl	800256c <_sbrk_r>
 80022c4:	3001      	adds	r0, #1
 80022c6:	d1f2      	bne.n	80022ae <sbrk_aligned+0x22>
 80022c8:	e7ef      	b.n	80022aa <sbrk_aligned+0x1e>
 80022ca:	bf00      	nop
 80022cc:	20000278 	.word	0x20000278

080022d0 <_malloc_r>:
 80022d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022d4:	1ccd      	adds	r5, r1, #3
 80022d6:	f025 0503 	bic.w	r5, r5, #3
 80022da:	3508      	adds	r5, #8
 80022dc:	2d0c      	cmp	r5, #12
 80022de:	bf38      	it	cc
 80022e0:	250c      	movcc	r5, #12
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	4606      	mov	r6, r0
 80022e6:	db01      	blt.n	80022ec <_malloc_r+0x1c>
 80022e8:	42a9      	cmp	r1, r5
 80022ea:	d904      	bls.n	80022f6 <_malloc_r+0x26>
 80022ec:	230c      	movs	r3, #12
 80022ee:	6033      	str	r3, [r6, #0]
 80022f0:	2000      	movs	r0, #0
 80022f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023cc <_malloc_r+0xfc>
 80022fa:	f000 f869 	bl	80023d0 <__malloc_lock>
 80022fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002302:	461c      	mov	r4, r3
 8002304:	bb44      	cbnz	r4, 8002358 <_malloc_r+0x88>
 8002306:	4629      	mov	r1, r5
 8002308:	4630      	mov	r0, r6
 800230a:	f7ff ffbf 	bl	800228c <sbrk_aligned>
 800230e:	1c43      	adds	r3, r0, #1
 8002310:	4604      	mov	r4, r0
 8002312:	d158      	bne.n	80023c6 <_malloc_r+0xf6>
 8002314:	f8d8 4000 	ldr.w	r4, [r8]
 8002318:	4627      	mov	r7, r4
 800231a:	2f00      	cmp	r7, #0
 800231c:	d143      	bne.n	80023a6 <_malloc_r+0xd6>
 800231e:	2c00      	cmp	r4, #0
 8002320:	d04b      	beq.n	80023ba <_malloc_r+0xea>
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	4639      	mov	r1, r7
 8002326:	4630      	mov	r0, r6
 8002328:	eb04 0903 	add.w	r9, r4, r3
 800232c:	f000 f91e 	bl	800256c <_sbrk_r>
 8002330:	4581      	cmp	r9, r0
 8002332:	d142      	bne.n	80023ba <_malloc_r+0xea>
 8002334:	6821      	ldr	r1, [r4, #0]
 8002336:	1a6d      	subs	r5, r5, r1
 8002338:	4629      	mov	r1, r5
 800233a:	4630      	mov	r0, r6
 800233c:	f7ff ffa6 	bl	800228c <sbrk_aligned>
 8002340:	3001      	adds	r0, #1
 8002342:	d03a      	beq.n	80023ba <_malloc_r+0xea>
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	442b      	add	r3, r5
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	f8d8 3000 	ldr.w	r3, [r8]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	bb62      	cbnz	r2, 80023ac <_malloc_r+0xdc>
 8002352:	f8c8 7000 	str.w	r7, [r8]
 8002356:	e00f      	b.n	8002378 <_malloc_r+0xa8>
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	1b52      	subs	r2, r2, r5
 800235c:	d420      	bmi.n	80023a0 <_malloc_r+0xd0>
 800235e:	2a0b      	cmp	r2, #11
 8002360:	d917      	bls.n	8002392 <_malloc_r+0xc2>
 8002362:	1961      	adds	r1, r4, r5
 8002364:	42a3      	cmp	r3, r4
 8002366:	6025      	str	r5, [r4, #0]
 8002368:	bf18      	it	ne
 800236a:	6059      	strne	r1, [r3, #4]
 800236c:	6863      	ldr	r3, [r4, #4]
 800236e:	bf08      	it	eq
 8002370:	f8c8 1000 	streq.w	r1, [r8]
 8002374:	5162      	str	r2, [r4, r5]
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	4630      	mov	r0, r6
 800237a:	f000 f82f 	bl	80023dc <__malloc_unlock>
 800237e:	f104 000b 	add.w	r0, r4, #11
 8002382:	1d23      	adds	r3, r4, #4
 8002384:	f020 0007 	bic.w	r0, r0, #7
 8002388:	1ac2      	subs	r2, r0, r3
 800238a:	bf1c      	itt	ne
 800238c:	1a1b      	subne	r3, r3, r0
 800238e:	50a3      	strne	r3, [r4, r2]
 8002390:	e7af      	b.n	80022f2 <_malloc_r+0x22>
 8002392:	6862      	ldr	r2, [r4, #4]
 8002394:	42a3      	cmp	r3, r4
 8002396:	bf0c      	ite	eq
 8002398:	f8c8 2000 	streq.w	r2, [r8]
 800239c:	605a      	strne	r2, [r3, #4]
 800239e:	e7eb      	b.n	8002378 <_malloc_r+0xa8>
 80023a0:	4623      	mov	r3, r4
 80023a2:	6864      	ldr	r4, [r4, #4]
 80023a4:	e7ae      	b.n	8002304 <_malloc_r+0x34>
 80023a6:	463c      	mov	r4, r7
 80023a8:	687f      	ldr	r7, [r7, #4]
 80023aa:	e7b6      	b.n	800231a <_malloc_r+0x4a>
 80023ac:	461a      	mov	r2, r3
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	42a3      	cmp	r3, r4
 80023b2:	d1fb      	bne.n	80023ac <_malloc_r+0xdc>
 80023b4:	2300      	movs	r3, #0
 80023b6:	6053      	str	r3, [r2, #4]
 80023b8:	e7de      	b.n	8002378 <_malloc_r+0xa8>
 80023ba:	230c      	movs	r3, #12
 80023bc:	6033      	str	r3, [r6, #0]
 80023be:	4630      	mov	r0, r6
 80023c0:	f000 f80c 	bl	80023dc <__malloc_unlock>
 80023c4:	e794      	b.n	80022f0 <_malloc_r+0x20>
 80023c6:	6005      	str	r5, [r0, #0]
 80023c8:	e7d6      	b.n	8002378 <_malloc_r+0xa8>
 80023ca:	bf00      	nop
 80023cc:	2000027c 	.word	0x2000027c

080023d0 <__malloc_lock>:
 80023d0:	4801      	ldr	r0, [pc, #4]	@ (80023d8 <__malloc_lock+0x8>)
 80023d2:	f000 b905 	b.w	80025e0 <__retarget_lock_acquire_recursive>
 80023d6:	bf00      	nop
 80023d8:	200003bc 	.word	0x200003bc

080023dc <__malloc_unlock>:
 80023dc:	4801      	ldr	r0, [pc, #4]	@ (80023e4 <__malloc_unlock+0x8>)
 80023de:	f000 b900 	b.w	80025e2 <__retarget_lock_release_recursive>
 80023e2:	bf00      	nop
 80023e4:	200003bc 	.word	0x200003bc

080023e8 <_strtoul_l.constprop.0>:
 80023e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023ec:	4e34      	ldr	r6, [pc, #208]	@ (80024c0 <_strtoul_l.constprop.0+0xd8>)
 80023ee:	4686      	mov	lr, r0
 80023f0:	460d      	mov	r5, r1
 80023f2:	4628      	mov	r0, r5
 80023f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80023f8:	5d37      	ldrb	r7, [r6, r4]
 80023fa:	f017 0708 	ands.w	r7, r7, #8
 80023fe:	d1f8      	bne.n	80023f2 <_strtoul_l.constprop.0+0xa>
 8002400:	2c2d      	cmp	r4, #45	@ 0x2d
 8002402:	d12f      	bne.n	8002464 <_strtoul_l.constprop.0+0x7c>
 8002404:	782c      	ldrb	r4, [r5, #0]
 8002406:	2701      	movs	r7, #1
 8002408:	1c85      	adds	r5, r0, #2
 800240a:	f033 0010 	bics.w	r0, r3, #16
 800240e:	d109      	bne.n	8002424 <_strtoul_l.constprop.0+0x3c>
 8002410:	2c30      	cmp	r4, #48	@ 0x30
 8002412:	d12c      	bne.n	800246e <_strtoul_l.constprop.0+0x86>
 8002414:	7828      	ldrb	r0, [r5, #0]
 8002416:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800241a:	2858      	cmp	r0, #88	@ 0x58
 800241c:	d127      	bne.n	800246e <_strtoul_l.constprop.0+0x86>
 800241e:	786c      	ldrb	r4, [r5, #1]
 8002420:	2310      	movs	r3, #16
 8002422:	3502      	adds	r5, #2
 8002424:	f04f 38ff 	mov.w	r8, #4294967295
 8002428:	2600      	movs	r6, #0
 800242a:	fbb8 f8f3 	udiv	r8, r8, r3
 800242e:	fb03 f908 	mul.w	r9, r3, r8
 8002432:	ea6f 0909 	mvn.w	r9, r9
 8002436:	4630      	mov	r0, r6
 8002438:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800243c:	f1bc 0f09 	cmp.w	ip, #9
 8002440:	d81c      	bhi.n	800247c <_strtoul_l.constprop.0+0x94>
 8002442:	4664      	mov	r4, ip
 8002444:	42a3      	cmp	r3, r4
 8002446:	dd2a      	ble.n	800249e <_strtoul_l.constprop.0+0xb6>
 8002448:	f1b6 3fff 	cmp.w	r6, #4294967295
 800244c:	d007      	beq.n	800245e <_strtoul_l.constprop.0+0x76>
 800244e:	4580      	cmp	r8, r0
 8002450:	d322      	bcc.n	8002498 <_strtoul_l.constprop.0+0xb0>
 8002452:	d101      	bne.n	8002458 <_strtoul_l.constprop.0+0x70>
 8002454:	45a1      	cmp	r9, r4
 8002456:	db1f      	blt.n	8002498 <_strtoul_l.constprop.0+0xb0>
 8002458:	fb00 4003 	mla	r0, r0, r3, r4
 800245c:	2601      	movs	r6, #1
 800245e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002462:	e7e9      	b.n	8002438 <_strtoul_l.constprop.0+0x50>
 8002464:	2c2b      	cmp	r4, #43	@ 0x2b
 8002466:	bf04      	itt	eq
 8002468:	782c      	ldrbeq	r4, [r5, #0]
 800246a:	1c85      	addeq	r5, r0, #2
 800246c:	e7cd      	b.n	800240a <_strtoul_l.constprop.0+0x22>
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1d8      	bne.n	8002424 <_strtoul_l.constprop.0+0x3c>
 8002472:	2c30      	cmp	r4, #48	@ 0x30
 8002474:	bf0c      	ite	eq
 8002476:	2308      	moveq	r3, #8
 8002478:	230a      	movne	r3, #10
 800247a:	e7d3      	b.n	8002424 <_strtoul_l.constprop.0+0x3c>
 800247c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8002480:	f1bc 0f19 	cmp.w	ip, #25
 8002484:	d801      	bhi.n	800248a <_strtoul_l.constprop.0+0xa2>
 8002486:	3c37      	subs	r4, #55	@ 0x37
 8002488:	e7dc      	b.n	8002444 <_strtoul_l.constprop.0+0x5c>
 800248a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800248e:	f1bc 0f19 	cmp.w	ip, #25
 8002492:	d804      	bhi.n	800249e <_strtoul_l.constprop.0+0xb6>
 8002494:	3c57      	subs	r4, #87	@ 0x57
 8002496:	e7d5      	b.n	8002444 <_strtoul_l.constprop.0+0x5c>
 8002498:	f04f 36ff 	mov.w	r6, #4294967295
 800249c:	e7df      	b.n	800245e <_strtoul_l.constprop.0+0x76>
 800249e:	1c73      	adds	r3, r6, #1
 80024a0:	d106      	bne.n	80024b0 <_strtoul_l.constprop.0+0xc8>
 80024a2:	2322      	movs	r3, #34	@ 0x22
 80024a4:	f8ce 3000 	str.w	r3, [lr]
 80024a8:	4630      	mov	r0, r6
 80024aa:	b932      	cbnz	r2, 80024ba <_strtoul_l.constprop.0+0xd2>
 80024ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024b0:	b107      	cbz	r7, 80024b4 <_strtoul_l.constprop.0+0xcc>
 80024b2:	4240      	negs	r0, r0
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d0f9      	beq.n	80024ac <_strtoul_l.constprop.0+0xc4>
 80024b8:	b106      	cbz	r6, 80024bc <_strtoul_l.constprop.0+0xd4>
 80024ba:	1e69      	subs	r1, r5, #1
 80024bc:	6011      	str	r1, [r2, #0]
 80024be:	e7f5      	b.n	80024ac <_strtoul_l.constprop.0+0xc4>
 80024c0:	08002f89 	.word	0x08002f89

080024c4 <_strtoul_r>:
 80024c4:	f7ff bf90 	b.w	80023e8 <_strtoul_l.constprop.0>

080024c8 <strtoul>:
 80024c8:	4613      	mov	r3, r2
 80024ca:	460a      	mov	r2, r1
 80024cc:	4601      	mov	r1, r0
 80024ce:	4802      	ldr	r0, [pc, #8]	@ (80024d8 <strtoul+0x10>)
 80024d0:	6800      	ldr	r0, [r0, #0]
 80024d2:	f7ff bf89 	b.w	80023e8 <_strtoul_l.constprop.0>
 80024d6:	bf00      	nop
 80024d8:	2000000c 	.word	0x2000000c

080024dc <siscanf>:
 80024dc:	b40e      	push	{r1, r2, r3}
 80024de:	b530      	push	{r4, r5, lr}
 80024e0:	b09c      	sub	sp, #112	@ 0x70
 80024e2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80024e4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80024e8:	f854 5b04 	ldr.w	r5, [r4], #4
 80024ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 80024f0:	9002      	str	r0, [sp, #8]
 80024f2:	9006      	str	r0, [sp, #24]
 80024f4:	f7fd fe76 	bl	80001e4 <strlen>
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <siscanf+0x4c>)
 80024fa:	9003      	str	r0, [sp, #12]
 80024fc:	9007      	str	r0, [sp, #28]
 80024fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002500:	480a      	ldr	r0, [pc, #40]	@ (800252c <siscanf+0x50>)
 8002502:	9401      	str	r4, [sp, #4]
 8002504:	2300      	movs	r3, #0
 8002506:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002508:	9314      	str	r3, [sp, #80]	@ 0x50
 800250a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800250e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002512:	462a      	mov	r2, r5
 8002514:	4623      	mov	r3, r4
 8002516:	a902      	add	r1, sp, #8
 8002518:	6800      	ldr	r0, [r0, #0]
 800251a:	f000 f913 	bl	8002744 <__ssvfiscanf_r>
 800251e:	b01c      	add	sp, #112	@ 0x70
 8002520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002524:	b003      	add	sp, #12
 8002526:	4770      	bx	lr
 8002528:	08002531 	.word	0x08002531
 800252c:	2000000c 	.word	0x2000000c

08002530 <__seofread>:
 8002530:	2000      	movs	r0, #0
 8002532:	4770      	bx	lr

08002534 <memset>:
 8002534:	4402      	add	r2, r0
 8002536:	4603      	mov	r3, r0
 8002538:	4293      	cmp	r3, r2
 800253a:	d100      	bne.n	800253e <memset+0xa>
 800253c:	4770      	bx	lr
 800253e:	f803 1b01 	strb.w	r1, [r3], #1
 8002542:	e7f9      	b.n	8002538 <memset+0x4>

08002544 <strncpy>:
 8002544:	b510      	push	{r4, lr}
 8002546:	3901      	subs	r1, #1
 8002548:	4603      	mov	r3, r0
 800254a:	b132      	cbz	r2, 800255a <strncpy+0x16>
 800254c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002550:	f803 4b01 	strb.w	r4, [r3], #1
 8002554:	3a01      	subs	r2, #1
 8002556:	2c00      	cmp	r4, #0
 8002558:	d1f7      	bne.n	800254a <strncpy+0x6>
 800255a:	441a      	add	r2, r3
 800255c:	2100      	movs	r1, #0
 800255e:	4293      	cmp	r3, r2
 8002560:	d100      	bne.n	8002564 <strncpy+0x20>
 8002562:	bd10      	pop	{r4, pc}
 8002564:	f803 1b01 	strb.w	r1, [r3], #1
 8002568:	e7f9      	b.n	800255e <strncpy+0x1a>
	...

0800256c <_sbrk_r>:
 800256c:	b538      	push	{r3, r4, r5, lr}
 800256e:	4d06      	ldr	r5, [pc, #24]	@ (8002588 <_sbrk_r+0x1c>)
 8002570:	2300      	movs	r3, #0
 8002572:	4604      	mov	r4, r0
 8002574:	4608      	mov	r0, r1
 8002576:	602b      	str	r3, [r5, #0]
 8002578:	f7fe fdd2 	bl	8001120 <_sbrk>
 800257c:	1c43      	adds	r3, r0, #1
 800257e:	d102      	bne.n	8002586 <_sbrk_r+0x1a>
 8002580:	682b      	ldr	r3, [r5, #0]
 8002582:	b103      	cbz	r3, 8002586 <_sbrk_r+0x1a>
 8002584:	6023      	str	r3, [r4, #0]
 8002586:	bd38      	pop	{r3, r4, r5, pc}
 8002588:	200003b8 	.word	0x200003b8

0800258c <__errno>:
 800258c:	4b01      	ldr	r3, [pc, #4]	@ (8002594 <__errno+0x8>)
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2000000c 	.word	0x2000000c

08002598 <__libc_init_array>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	4d0d      	ldr	r5, [pc, #52]	@ (80025d0 <__libc_init_array+0x38>)
 800259c:	4c0d      	ldr	r4, [pc, #52]	@ (80025d4 <__libc_init_array+0x3c>)
 800259e:	1b64      	subs	r4, r4, r5
 80025a0:	10a4      	asrs	r4, r4, #2
 80025a2:	2600      	movs	r6, #0
 80025a4:	42a6      	cmp	r6, r4
 80025a6:	d109      	bne.n	80025bc <__libc_init_array+0x24>
 80025a8:	4d0b      	ldr	r5, [pc, #44]	@ (80025d8 <__libc_init_array+0x40>)
 80025aa:	4c0c      	ldr	r4, [pc, #48]	@ (80025dc <__libc_init_array+0x44>)
 80025ac:	f000 fcb2 	bl	8002f14 <_init>
 80025b0:	1b64      	subs	r4, r4, r5
 80025b2:	10a4      	asrs	r4, r4, #2
 80025b4:	2600      	movs	r6, #0
 80025b6:	42a6      	cmp	r6, r4
 80025b8:	d105      	bne.n	80025c6 <__libc_init_array+0x2e>
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
 80025bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c0:	4798      	blx	r3
 80025c2:	3601      	adds	r6, #1
 80025c4:	e7ee      	b.n	80025a4 <__libc_init_array+0xc>
 80025c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ca:	4798      	blx	r3
 80025cc:	3601      	adds	r6, #1
 80025ce:	e7f2      	b.n	80025b6 <__libc_init_array+0x1e>
 80025d0:	080030b0 	.word	0x080030b0
 80025d4:	080030b0 	.word	0x080030b0
 80025d8:	080030b0 	.word	0x080030b0
 80025dc:	080030b4 	.word	0x080030b4

080025e0 <__retarget_lock_acquire_recursive>:
 80025e0:	4770      	bx	lr

080025e2 <__retarget_lock_release_recursive>:
 80025e2:	4770      	bx	lr

080025e4 <memcpy>:
 80025e4:	440a      	add	r2, r1
 80025e6:	4291      	cmp	r1, r2
 80025e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80025ec:	d100      	bne.n	80025f0 <memcpy+0xc>
 80025ee:	4770      	bx	lr
 80025f0:	b510      	push	{r4, lr}
 80025f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025fa:	4291      	cmp	r1, r2
 80025fc:	d1f9      	bne.n	80025f2 <memcpy+0xe>
 80025fe:	bd10      	pop	{r4, pc}

08002600 <_free_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	4605      	mov	r5, r0
 8002604:	2900      	cmp	r1, #0
 8002606:	d041      	beq.n	800268c <_free_r+0x8c>
 8002608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800260c:	1f0c      	subs	r4, r1, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	bfb8      	it	lt
 8002612:	18e4      	addlt	r4, r4, r3
 8002614:	f7ff fedc 	bl	80023d0 <__malloc_lock>
 8002618:	4a1d      	ldr	r2, [pc, #116]	@ (8002690 <_free_r+0x90>)
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	b933      	cbnz	r3, 800262c <_free_r+0x2c>
 800261e:	6063      	str	r3, [r4, #4]
 8002620:	6014      	str	r4, [r2, #0]
 8002622:	4628      	mov	r0, r5
 8002624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002628:	f7ff bed8 	b.w	80023dc <__malloc_unlock>
 800262c:	42a3      	cmp	r3, r4
 800262e:	d908      	bls.n	8002642 <_free_r+0x42>
 8002630:	6820      	ldr	r0, [r4, #0]
 8002632:	1821      	adds	r1, r4, r0
 8002634:	428b      	cmp	r3, r1
 8002636:	bf01      	itttt	eq
 8002638:	6819      	ldreq	r1, [r3, #0]
 800263a:	685b      	ldreq	r3, [r3, #4]
 800263c:	1809      	addeq	r1, r1, r0
 800263e:	6021      	streq	r1, [r4, #0]
 8002640:	e7ed      	b.n	800261e <_free_r+0x1e>
 8002642:	461a      	mov	r2, r3
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	b10b      	cbz	r3, 800264c <_free_r+0x4c>
 8002648:	42a3      	cmp	r3, r4
 800264a:	d9fa      	bls.n	8002642 <_free_r+0x42>
 800264c:	6811      	ldr	r1, [r2, #0]
 800264e:	1850      	adds	r0, r2, r1
 8002650:	42a0      	cmp	r0, r4
 8002652:	d10b      	bne.n	800266c <_free_r+0x6c>
 8002654:	6820      	ldr	r0, [r4, #0]
 8002656:	4401      	add	r1, r0
 8002658:	1850      	adds	r0, r2, r1
 800265a:	4283      	cmp	r3, r0
 800265c:	6011      	str	r1, [r2, #0]
 800265e:	d1e0      	bne.n	8002622 <_free_r+0x22>
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	6053      	str	r3, [r2, #4]
 8002666:	4408      	add	r0, r1
 8002668:	6010      	str	r0, [r2, #0]
 800266a:	e7da      	b.n	8002622 <_free_r+0x22>
 800266c:	d902      	bls.n	8002674 <_free_r+0x74>
 800266e:	230c      	movs	r3, #12
 8002670:	602b      	str	r3, [r5, #0]
 8002672:	e7d6      	b.n	8002622 <_free_r+0x22>
 8002674:	6820      	ldr	r0, [r4, #0]
 8002676:	1821      	adds	r1, r4, r0
 8002678:	428b      	cmp	r3, r1
 800267a:	bf04      	itt	eq
 800267c:	6819      	ldreq	r1, [r3, #0]
 800267e:	685b      	ldreq	r3, [r3, #4]
 8002680:	6063      	str	r3, [r4, #4]
 8002682:	bf04      	itt	eq
 8002684:	1809      	addeq	r1, r1, r0
 8002686:	6021      	streq	r1, [r4, #0]
 8002688:	6054      	str	r4, [r2, #4]
 800268a:	e7ca      	b.n	8002622 <_free_r+0x22>
 800268c:	bd38      	pop	{r3, r4, r5, pc}
 800268e:	bf00      	nop
 8002690:	2000027c 	.word	0x2000027c

08002694 <_sungetc_r>:
 8002694:	b538      	push	{r3, r4, r5, lr}
 8002696:	1c4b      	adds	r3, r1, #1
 8002698:	4614      	mov	r4, r2
 800269a:	d103      	bne.n	80026a4 <_sungetc_r+0x10>
 800269c:	f04f 35ff 	mov.w	r5, #4294967295
 80026a0:	4628      	mov	r0, r5
 80026a2:	bd38      	pop	{r3, r4, r5, pc}
 80026a4:	8993      	ldrh	r3, [r2, #12]
 80026a6:	f023 0320 	bic.w	r3, r3, #32
 80026aa:	8193      	strh	r3, [r2, #12]
 80026ac:	6853      	ldr	r3, [r2, #4]
 80026ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026b0:	b2cd      	uxtb	r5, r1
 80026b2:	b18a      	cbz	r2, 80026d8 <_sungetc_r+0x44>
 80026b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80026b6:	429a      	cmp	r2, r3
 80026b8:	dd08      	ble.n	80026cc <_sungetc_r+0x38>
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	1e5a      	subs	r2, r3, #1
 80026be:	6022      	str	r2, [r4, #0]
 80026c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80026c4:	6863      	ldr	r3, [r4, #4]
 80026c6:	3301      	adds	r3, #1
 80026c8:	6063      	str	r3, [r4, #4]
 80026ca:	e7e9      	b.n	80026a0 <_sungetc_r+0xc>
 80026cc:	4621      	mov	r1, r4
 80026ce:	f000 fb34 	bl	8002d3a <__submore>
 80026d2:	2800      	cmp	r0, #0
 80026d4:	d0f1      	beq.n	80026ba <_sungetc_r+0x26>
 80026d6:	e7e1      	b.n	800269c <_sungetc_r+0x8>
 80026d8:	6921      	ldr	r1, [r4, #16]
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	b141      	cbz	r1, 80026f0 <_sungetc_r+0x5c>
 80026de:	4291      	cmp	r1, r2
 80026e0:	d206      	bcs.n	80026f0 <_sungetc_r+0x5c>
 80026e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80026e6:	42a9      	cmp	r1, r5
 80026e8:	d102      	bne.n	80026f0 <_sungetc_r+0x5c>
 80026ea:	3a01      	subs	r2, #1
 80026ec:	6022      	str	r2, [r4, #0]
 80026ee:	e7ea      	b.n	80026c6 <_sungetc_r+0x32>
 80026f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80026f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80026fa:	2303      	movs	r3, #3
 80026fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80026fe:	4623      	mov	r3, r4
 8002700:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002704:	6023      	str	r3, [r4, #0]
 8002706:	2301      	movs	r3, #1
 8002708:	e7de      	b.n	80026c8 <_sungetc_r+0x34>

0800270a <__ssrefill_r>:
 800270a:	b510      	push	{r4, lr}
 800270c:	460c      	mov	r4, r1
 800270e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002710:	b169      	cbz	r1, 800272e <__ssrefill_r+0x24>
 8002712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002716:	4299      	cmp	r1, r3
 8002718:	d001      	beq.n	800271e <__ssrefill_r+0x14>
 800271a:	f7ff ff71 	bl	8002600 <_free_r>
 800271e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002720:	6063      	str	r3, [r4, #4]
 8002722:	2000      	movs	r0, #0
 8002724:	6360      	str	r0, [r4, #52]	@ 0x34
 8002726:	b113      	cbz	r3, 800272e <__ssrefill_r+0x24>
 8002728:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800272a:	6023      	str	r3, [r4, #0]
 800272c:	bd10      	pop	{r4, pc}
 800272e:	6923      	ldr	r3, [r4, #16]
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	2300      	movs	r3, #0
 8002734:	6063      	str	r3, [r4, #4]
 8002736:	89a3      	ldrh	r3, [r4, #12]
 8002738:	f043 0320 	orr.w	r3, r3, #32
 800273c:	81a3      	strh	r3, [r4, #12]
 800273e:	f04f 30ff 	mov.w	r0, #4294967295
 8002742:	e7f3      	b.n	800272c <__ssrefill_r+0x22>

08002744 <__ssvfiscanf_r>:
 8002744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002748:	460c      	mov	r4, r1
 800274a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800274e:	2100      	movs	r1, #0
 8002750:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8002754:	49a5      	ldr	r1, [pc, #660]	@ (80029ec <__ssvfiscanf_r+0x2a8>)
 8002756:	91a0      	str	r1, [sp, #640]	@ 0x280
 8002758:	f10d 0804 	add.w	r8, sp, #4
 800275c:	49a4      	ldr	r1, [pc, #656]	@ (80029f0 <__ssvfiscanf_r+0x2ac>)
 800275e:	4fa5      	ldr	r7, [pc, #660]	@ (80029f4 <__ssvfiscanf_r+0x2b0>)
 8002760:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8002764:	4606      	mov	r6, r0
 8002766:	91a1      	str	r1, [sp, #644]	@ 0x284
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	7813      	ldrb	r3, [r2, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8158 	beq.w	8002a22 <__ssvfiscanf_r+0x2de>
 8002772:	5cf9      	ldrb	r1, [r7, r3]
 8002774:	f011 0108 	ands.w	r1, r1, #8
 8002778:	f102 0501 	add.w	r5, r2, #1
 800277c:	d019      	beq.n	80027b2 <__ssvfiscanf_r+0x6e>
 800277e:	6863      	ldr	r3, [r4, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	dd0f      	ble.n	80027a4 <__ssvfiscanf_r+0x60>
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	5cba      	ldrb	r2, [r7, r2]
 800278a:	0712      	lsls	r2, r2, #28
 800278c:	d401      	bmi.n	8002792 <__ssvfiscanf_r+0x4e>
 800278e:	462a      	mov	r2, r5
 8002790:	e7eb      	b.n	800276a <__ssvfiscanf_r+0x26>
 8002792:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002794:	3201      	adds	r2, #1
 8002796:	9245      	str	r2, [sp, #276]	@ 0x114
 8002798:	6862      	ldr	r2, [r4, #4]
 800279a:	3301      	adds	r3, #1
 800279c:	3a01      	subs	r2, #1
 800279e:	6062      	str	r2, [r4, #4]
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	e7ec      	b.n	800277e <__ssvfiscanf_r+0x3a>
 80027a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80027a6:	4621      	mov	r1, r4
 80027a8:	4630      	mov	r0, r6
 80027aa:	4798      	blx	r3
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d0e9      	beq.n	8002784 <__ssvfiscanf_r+0x40>
 80027b0:	e7ed      	b.n	800278e <__ssvfiscanf_r+0x4a>
 80027b2:	2b25      	cmp	r3, #37	@ 0x25
 80027b4:	d012      	beq.n	80027dc <__ssvfiscanf_r+0x98>
 80027b6:	4699      	mov	r9, r3
 80027b8:	6863      	ldr	r3, [r4, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f340 8093 	ble.w	80028e6 <__ssvfiscanf_r+0x1a2>
 80027c0:	6822      	ldr	r2, [r4, #0]
 80027c2:	7813      	ldrb	r3, [r2, #0]
 80027c4:	454b      	cmp	r3, r9
 80027c6:	f040 812c 	bne.w	8002a22 <__ssvfiscanf_r+0x2de>
 80027ca:	6863      	ldr	r3, [r4, #4]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	6063      	str	r3, [r4, #4]
 80027d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80027d2:	3201      	adds	r2, #1
 80027d4:	3301      	adds	r3, #1
 80027d6:	6022      	str	r2, [r4, #0]
 80027d8:	9345      	str	r3, [sp, #276]	@ 0x114
 80027da:	e7d8      	b.n	800278e <__ssvfiscanf_r+0x4a>
 80027dc:	9141      	str	r1, [sp, #260]	@ 0x104
 80027de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80027e0:	7853      	ldrb	r3, [r2, #1]
 80027e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027e4:	bf02      	ittt	eq
 80027e6:	2310      	moveq	r3, #16
 80027e8:	1c95      	addeq	r5, r2, #2
 80027ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 80027ec:	220a      	movs	r2, #10
 80027ee:	46a9      	mov	r9, r5
 80027f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80027f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	d91e      	bls.n	800283a <__ssvfiscanf_r+0xf6>
 80027fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80029f8 <__ssvfiscanf_r+0x2b4>
 8002800:	2203      	movs	r2, #3
 8002802:	4650      	mov	r0, sl
 8002804:	f7fd fcfc 	bl	8000200 <memchr>
 8002808:	b138      	cbz	r0, 800281a <__ssvfiscanf_r+0xd6>
 800280a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800280c:	eba0 000a 	sub.w	r0, r0, sl
 8002810:	2301      	movs	r3, #1
 8002812:	4083      	lsls	r3, r0
 8002814:	4313      	orrs	r3, r2
 8002816:	9341      	str	r3, [sp, #260]	@ 0x104
 8002818:	464d      	mov	r5, r9
 800281a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800281e:	2b78      	cmp	r3, #120	@ 0x78
 8002820:	d806      	bhi.n	8002830 <__ssvfiscanf_r+0xec>
 8002822:	2b57      	cmp	r3, #87	@ 0x57
 8002824:	d810      	bhi.n	8002848 <__ssvfiscanf_r+0x104>
 8002826:	2b25      	cmp	r3, #37	@ 0x25
 8002828:	d0c5      	beq.n	80027b6 <__ssvfiscanf_r+0x72>
 800282a:	d857      	bhi.n	80028dc <__ssvfiscanf_r+0x198>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d065      	beq.n	80028fc <__ssvfiscanf_r+0x1b8>
 8002830:	2303      	movs	r3, #3
 8002832:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002834:	230a      	movs	r3, #10
 8002836:	9342      	str	r3, [sp, #264]	@ 0x108
 8002838:	e078      	b.n	800292c <__ssvfiscanf_r+0x1e8>
 800283a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800283c:	fb02 1103 	mla	r1, r2, r3, r1
 8002840:	3930      	subs	r1, #48	@ 0x30
 8002842:	9143      	str	r1, [sp, #268]	@ 0x10c
 8002844:	464d      	mov	r5, r9
 8002846:	e7d2      	b.n	80027ee <__ssvfiscanf_r+0xaa>
 8002848:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800284c:	2a20      	cmp	r2, #32
 800284e:	d8ef      	bhi.n	8002830 <__ssvfiscanf_r+0xec>
 8002850:	a101      	add	r1, pc, #4	@ (adr r1, 8002858 <__ssvfiscanf_r+0x114>)
 8002852:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002856:	bf00      	nop
 8002858:	0800290b 	.word	0x0800290b
 800285c:	08002831 	.word	0x08002831
 8002860:	08002831 	.word	0x08002831
 8002864:	08002965 	.word	0x08002965
 8002868:	08002831 	.word	0x08002831
 800286c:	08002831 	.word	0x08002831
 8002870:	08002831 	.word	0x08002831
 8002874:	08002831 	.word	0x08002831
 8002878:	08002831 	.word	0x08002831
 800287c:	08002831 	.word	0x08002831
 8002880:	08002831 	.word	0x08002831
 8002884:	0800297b 	.word	0x0800297b
 8002888:	08002961 	.word	0x08002961
 800288c:	080028e3 	.word	0x080028e3
 8002890:	080028e3 	.word	0x080028e3
 8002894:	080028e3 	.word	0x080028e3
 8002898:	08002831 	.word	0x08002831
 800289c:	0800291d 	.word	0x0800291d
 80028a0:	08002831 	.word	0x08002831
 80028a4:	08002831 	.word	0x08002831
 80028a8:	08002831 	.word	0x08002831
 80028ac:	08002831 	.word	0x08002831
 80028b0:	0800298b 	.word	0x0800298b
 80028b4:	08002925 	.word	0x08002925
 80028b8:	08002903 	.word	0x08002903
 80028bc:	08002831 	.word	0x08002831
 80028c0:	08002831 	.word	0x08002831
 80028c4:	08002987 	.word	0x08002987
 80028c8:	08002831 	.word	0x08002831
 80028cc:	08002961 	.word	0x08002961
 80028d0:	08002831 	.word	0x08002831
 80028d4:	08002831 	.word	0x08002831
 80028d8:	0800290b 	.word	0x0800290b
 80028dc:	3b45      	subs	r3, #69	@ 0x45
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d8a6      	bhi.n	8002830 <__ssvfiscanf_r+0xec>
 80028e2:	2305      	movs	r3, #5
 80028e4:	e021      	b.n	800292a <__ssvfiscanf_r+0x1e6>
 80028e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80028e8:	4621      	mov	r1, r4
 80028ea:	4630      	mov	r0, r6
 80028ec:	4798      	blx	r3
 80028ee:	2800      	cmp	r0, #0
 80028f0:	f43f af66 	beq.w	80027c0 <__ssvfiscanf_r+0x7c>
 80028f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80028f6:	2800      	cmp	r0, #0
 80028f8:	f040 808b 	bne.w	8002a12 <__ssvfiscanf_r+0x2ce>
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	e08b      	b.n	8002a1a <__ssvfiscanf_r+0x2d6>
 8002902:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	9241      	str	r2, [sp, #260]	@ 0x104
 800290a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800290c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002910:	9241      	str	r2, [sp, #260]	@ 0x104
 8002912:	2210      	movs	r2, #16
 8002914:	2b6e      	cmp	r3, #110	@ 0x6e
 8002916:	9242      	str	r2, [sp, #264]	@ 0x108
 8002918:	d902      	bls.n	8002920 <__ssvfiscanf_r+0x1dc>
 800291a:	e005      	b.n	8002928 <__ssvfiscanf_r+0x1e4>
 800291c:	2300      	movs	r3, #0
 800291e:	9342      	str	r3, [sp, #264]	@ 0x108
 8002920:	2303      	movs	r3, #3
 8002922:	e002      	b.n	800292a <__ssvfiscanf_r+0x1e6>
 8002924:	2308      	movs	r3, #8
 8002926:	9342      	str	r3, [sp, #264]	@ 0x108
 8002928:	2304      	movs	r3, #4
 800292a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800292c:	6863      	ldr	r3, [r4, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	dd39      	ble.n	80029a6 <__ssvfiscanf_r+0x262>
 8002932:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002934:	0659      	lsls	r1, r3, #25
 8002936:	d404      	bmi.n	8002942 <__ssvfiscanf_r+0x1fe>
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	5cba      	ldrb	r2, [r7, r2]
 800293e:	0712      	lsls	r2, r2, #28
 8002940:	d438      	bmi.n	80029b4 <__ssvfiscanf_r+0x270>
 8002942:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8002944:	2b02      	cmp	r3, #2
 8002946:	dc47      	bgt.n	80029d8 <__ssvfiscanf_r+0x294>
 8002948:	466b      	mov	r3, sp
 800294a:	4622      	mov	r2, r4
 800294c:	a941      	add	r1, sp, #260	@ 0x104
 800294e:	4630      	mov	r0, r6
 8002950:	f000 f86c 	bl	8002a2c <_scanf_chars>
 8002954:	2801      	cmp	r0, #1
 8002956:	d064      	beq.n	8002a22 <__ssvfiscanf_r+0x2de>
 8002958:	2802      	cmp	r0, #2
 800295a:	f47f af18 	bne.w	800278e <__ssvfiscanf_r+0x4a>
 800295e:	e7c9      	b.n	80028f4 <__ssvfiscanf_r+0x1b0>
 8002960:	220a      	movs	r2, #10
 8002962:	e7d7      	b.n	8002914 <__ssvfiscanf_r+0x1d0>
 8002964:	4629      	mov	r1, r5
 8002966:	4640      	mov	r0, r8
 8002968:	f000 f9ae 	bl	8002cc8 <__sccl>
 800296c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800296e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002972:	9341      	str	r3, [sp, #260]	@ 0x104
 8002974:	4605      	mov	r5, r0
 8002976:	2301      	movs	r3, #1
 8002978:	e7d7      	b.n	800292a <__ssvfiscanf_r+0x1e6>
 800297a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800297c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002980:	9341      	str	r3, [sp, #260]	@ 0x104
 8002982:	2300      	movs	r3, #0
 8002984:	e7d1      	b.n	800292a <__ssvfiscanf_r+0x1e6>
 8002986:	2302      	movs	r3, #2
 8002988:	e7cf      	b.n	800292a <__ssvfiscanf_r+0x1e6>
 800298a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800298c:	06c3      	lsls	r3, r0, #27
 800298e:	f53f aefe 	bmi.w	800278e <__ssvfiscanf_r+0x4a>
 8002992:	9b00      	ldr	r3, [sp, #0]
 8002994:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002996:	1d19      	adds	r1, r3, #4
 8002998:	9100      	str	r1, [sp, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	07c0      	lsls	r0, r0, #31
 800299e:	bf4c      	ite	mi
 80029a0:	801a      	strhmi	r2, [r3, #0]
 80029a2:	601a      	strpl	r2, [r3, #0]
 80029a4:	e6f3      	b.n	800278e <__ssvfiscanf_r+0x4a>
 80029a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80029a8:	4621      	mov	r1, r4
 80029aa:	4630      	mov	r0, r6
 80029ac:	4798      	blx	r3
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d0bf      	beq.n	8002932 <__ssvfiscanf_r+0x1ee>
 80029b2:	e79f      	b.n	80028f4 <__ssvfiscanf_r+0x1b0>
 80029b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80029b6:	3201      	adds	r2, #1
 80029b8:	9245      	str	r2, [sp, #276]	@ 0x114
 80029ba:	6862      	ldr	r2, [r4, #4]
 80029bc:	3a01      	subs	r2, #1
 80029be:	2a00      	cmp	r2, #0
 80029c0:	6062      	str	r2, [r4, #4]
 80029c2:	dd02      	ble.n	80029ca <__ssvfiscanf_r+0x286>
 80029c4:	3301      	adds	r3, #1
 80029c6:	6023      	str	r3, [r4, #0]
 80029c8:	e7b6      	b.n	8002938 <__ssvfiscanf_r+0x1f4>
 80029ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80029cc:	4621      	mov	r1, r4
 80029ce:	4630      	mov	r0, r6
 80029d0:	4798      	blx	r3
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d0b0      	beq.n	8002938 <__ssvfiscanf_r+0x1f4>
 80029d6:	e78d      	b.n	80028f4 <__ssvfiscanf_r+0x1b0>
 80029d8:	2b04      	cmp	r3, #4
 80029da:	dc0f      	bgt.n	80029fc <__ssvfiscanf_r+0x2b8>
 80029dc:	466b      	mov	r3, sp
 80029de:	4622      	mov	r2, r4
 80029e0:	a941      	add	r1, sp, #260	@ 0x104
 80029e2:	4630      	mov	r0, r6
 80029e4:	f000 f87c 	bl	8002ae0 <_scanf_i>
 80029e8:	e7b4      	b.n	8002954 <__ssvfiscanf_r+0x210>
 80029ea:	bf00      	nop
 80029ec:	08002695 	.word	0x08002695
 80029f0:	0800270b 	.word	0x0800270b
 80029f4:	08002f89 	.word	0x08002f89
 80029f8:	08003089 	.word	0x08003089
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <__ssvfiscanf_r+0x2e4>)
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f43f aec5 	beq.w	800278e <__ssvfiscanf_r+0x4a>
 8002a04:	466b      	mov	r3, sp
 8002a06:	4622      	mov	r2, r4
 8002a08:	a941      	add	r1, sp, #260	@ 0x104
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	f3af 8000 	nop.w
 8002a10:	e7a0      	b.n	8002954 <__ssvfiscanf_r+0x210>
 8002a12:	89a3      	ldrh	r3, [r4, #12]
 8002a14:	065b      	lsls	r3, r3, #25
 8002a16:	f53f af71 	bmi.w	80028fc <__ssvfiscanf_r+0x1b8>
 8002a1a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8002a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a22:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002a24:	e7f9      	b.n	8002a1a <__ssvfiscanf_r+0x2d6>
 8002a26:	bf00      	nop
 8002a28:	00000000 	.word	0x00000000

08002a2c <_scanf_chars>:
 8002a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a30:	4615      	mov	r5, r2
 8002a32:	688a      	ldr	r2, [r1, #8]
 8002a34:	4680      	mov	r8, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	b932      	cbnz	r2, 8002a48 <_scanf_chars+0x1c>
 8002a3a:	698a      	ldr	r2, [r1, #24]
 8002a3c:	2a00      	cmp	r2, #0
 8002a3e:	bf14      	ite	ne
 8002a40:	f04f 32ff 	movne.w	r2, #4294967295
 8002a44:	2201      	moveq	r2, #1
 8002a46:	608a      	str	r2, [r1, #8]
 8002a48:	6822      	ldr	r2, [r4, #0]
 8002a4a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8002adc <_scanf_chars+0xb0>
 8002a4e:	06d1      	lsls	r1, r2, #27
 8002a50:	bf5f      	itttt	pl
 8002a52:	681a      	ldrpl	r2, [r3, #0]
 8002a54:	1d11      	addpl	r1, r2, #4
 8002a56:	6019      	strpl	r1, [r3, #0]
 8002a58:	6816      	ldrpl	r6, [r2, #0]
 8002a5a:	2700      	movs	r7, #0
 8002a5c:	69a0      	ldr	r0, [r4, #24]
 8002a5e:	b188      	cbz	r0, 8002a84 <_scanf_chars+0x58>
 8002a60:	2801      	cmp	r0, #1
 8002a62:	d107      	bne.n	8002a74 <_scanf_chars+0x48>
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	6963      	ldr	r3, [r4, #20]
 8002a6a:	5c9b      	ldrb	r3, [r3, r2]
 8002a6c:	b953      	cbnz	r3, 8002a84 <_scanf_chars+0x58>
 8002a6e:	2f00      	cmp	r7, #0
 8002a70:	d031      	beq.n	8002ad6 <_scanf_chars+0xaa>
 8002a72:	e022      	b.n	8002aba <_scanf_chars+0x8e>
 8002a74:	2802      	cmp	r0, #2
 8002a76:	d120      	bne.n	8002aba <_scanf_chars+0x8e>
 8002a78:	682b      	ldr	r3, [r5, #0]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8002a80:	071b      	lsls	r3, r3, #28
 8002a82:	d41a      	bmi.n	8002aba <_scanf_chars+0x8e>
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	06da      	lsls	r2, r3, #27
 8002a88:	bf5e      	ittt	pl
 8002a8a:	682b      	ldrpl	r3, [r5, #0]
 8002a8c:	781b      	ldrbpl	r3, [r3, #0]
 8002a8e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002a92:	682a      	ldr	r2, [r5, #0]
 8002a94:	686b      	ldr	r3, [r5, #4]
 8002a96:	3201      	adds	r2, #1
 8002a98:	602a      	str	r2, [r5, #0]
 8002a9a:	68a2      	ldr	r2, [r4, #8]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	3a01      	subs	r2, #1
 8002aa0:	606b      	str	r3, [r5, #4]
 8002aa2:	3701      	adds	r7, #1
 8002aa4:	60a2      	str	r2, [r4, #8]
 8002aa6:	b142      	cbz	r2, 8002aba <_scanf_chars+0x8e>
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	dcd7      	bgt.n	8002a5c <_scanf_chars+0x30>
 8002aac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	4640      	mov	r0, r8
 8002ab4:	4798      	blx	r3
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d0d0      	beq.n	8002a5c <_scanf_chars+0x30>
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	f013 0310 	ands.w	r3, r3, #16
 8002ac0:	d105      	bne.n	8002ace <_scanf_chars+0xa2>
 8002ac2:	68e2      	ldr	r2, [r4, #12]
 8002ac4:	3201      	adds	r2, #1
 8002ac6:	60e2      	str	r2, [r4, #12]
 8002ac8:	69a2      	ldr	r2, [r4, #24]
 8002aca:	b102      	cbz	r2, 8002ace <_scanf_chars+0xa2>
 8002acc:	7033      	strb	r3, [r6, #0]
 8002ace:	6923      	ldr	r3, [r4, #16]
 8002ad0:	443b      	add	r3, r7
 8002ad2:	6123      	str	r3, [r4, #16]
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ada:	bf00      	nop
 8002adc:	08002f89 	.word	0x08002f89

08002ae0 <_scanf_i>:
 8002ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae4:	4698      	mov	r8, r3
 8002ae6:	4b74      	ldr	r3, [pc, #464]	@ (8002cb8 <_scanf_i+0x1d8>)
 8002ae8:	460c      	mov	r4, r1
 8002aea:	4682      	mov	sl, r0
 8002aec:	4616      	mov	r6, r2
 8002aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002af2:	b087      	sub	sp, #28
 8002af4:	ab03      	add	r3, sp, #12
 8002af6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002afa:	4b70      	ldr	r3, [pc, #448]	@ (8002cbc <_scanf_i+0x1dc>)
 8002afc:	69a1      	ldr	r1, [r4, #24]
 8002afe:	4a70      	ldr	r2, [pc, #448]	@ (8002cc0 <_scanf_i+0x1e0>)
 8002b00:	2903      	cmp	r1, #3
 8002b02:	bf08      	it	eq
 8002b04:	461a      	moveq	r2, r3
 8002b06:	68a3      	ldr	r3, [r4, #8]
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	1e5a      	subs	r2, r3, #1
 8002b0c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8002b10:	bf88      	it	hi
 8002b12:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002b16:	4627      	mov	r7, r4
 8002b18:	bf82      	ittt	hi
 8002b1a:	eb03 0905 	addhi.w	r9, r3, r5
 8002b1e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8002b22:	60a3      	strhi	r3, [r4, #8]
 8002b24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002b28:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8002b2c:	bf98      	it	ls
 8002b2e:	f04f 0900 	movls.w	r9, #0
 8002b32:	6023      	str	r3, [r4, #0]
 8002b34:	463d      	mov	r5, r7
 8002b36:	f04f 0b00 	mov.w	fp, #0
 8002b3a:	6831      	ldr	r1, [r6, #0]
 8002b3c:	ab03      	add	r3, sp, #12
 8002b3e:	7809      	ldrb	r1, [r1, #0]
 8002b40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002b44:	2202      	movs	r2, #2
 8002b46:	f7fd fb5b 	bl	8000200 <memchr>
 8002b4a:	b328      	cbz	r0, 8002b98 <_scanf_i+0xb8>
 8002b4c:	f1bb 0f01 	cmp.w	fp, #1
 8002b50:	d159      	bne.n	8002c06 <_scanf_i+0x126>
 8002b52:	6862      	ldr	r2, [r4, #4]
 8002b54:	b92a      	cbnz	r2, 8002b62 <_scanf_i+0x82>
 8002b56:	6822      	ldr	r2, [r4, #0]
 8002b58:	2108      	movs	r1, #8
 8002b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5e:	6061      	str	r1, [r4, #4]
 8002b60:	6022      	str	r2, [r4, #0]
 8002b62:	6822      	ldr	r2, [r4, #0]
 8002b64:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8002b68:	6022      	str	r2, [r4, #0]
 8002b6a:	68a2      	ldr	r2, [r4, #8]
 8002b6c:	1e51      	subs	r1, r2, #1
 8002b6e:	60a1      	str	r1, [r4, #8]
 8002b70:	b192      	cbz	r2, 8002b98 <_scanf_i+0xb8>
 8002b72:	6832      	ldr	r2, [r6, #0]
 8002b74:	1c51      	adds	r1, r2, #1
 8002b76:	6031      	str	r1, [r6, #0]
 8002b78:	7812      	ldrb	r2, [r2, #0]
 8002b7a:	f805 2b01 	strb.w	r2, [r5], #1
 8002b7e:	6872      	ldr	r2, [r6, #4]
 8002b80:	3a01      	subs	r2, #1
 8002b82:	2a00      	cmp	r2, #0
 8002b84:	6072      	str	r2, [r6, #4]
 8002b86:	dc07      	bgt.n	8002b98 <_scanf_i+0xb8>
 8002b88:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8002b8c:	4631      	mov	r1, r6
 8002b8e:	4650      	mov	r0, sl
 8002b90:	4790      	blx	r2
 8002b92:	2800      	cmp	r0, #0
 8002b94:	f040 8085 	bne.w	8002ca2 <_scanf_i+0x1c2>
 8002b98:	f10b 0b01 	add.w	fp, fp, #1
 8002b9c:	f1bb 0f03 	cmp.w	fp, #3
 8002ba0:	d1cb      	bne.n	8002b3a <_scanf_i+0x5a>
 8002ba2:	6863      	ldr	r3, [r4, #4]
 8002ba4:	b90b      	cbnz	r3, 8002baa <_scanf_i+0xca>
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	6063      	str	r3, [r4, #4]
 8002baa:	6863      	ldr	r3, [r4, #4]
 8002bac:	4945      	ldr	r1, [pc, #276]	@ (8002cc4 <_scanf_i+0x1e4>)
 8002bae:	6960      	ldr	r0, [r4, #20]
 8002bb0:	1ac9      	subs	r1, r1, r3
 8002bb2:	f000 f889 	bl	8002cc8 <__sccl>
 8002bb6:	f04f 0b00 	mov.w	fp, #0
 8002bba:	68a3      	ldr	r3, [r4, #8]
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03d      	beq.n	8002c3e <_scanf_i+0x15e>
 8002bc2:	6831      	ldr	r1, [r6, #0]
 8002bc4:	6960      	ldr	r0, [r4, #20]
 8002bc6:	f891 c000 	ldrb.w	ip, [r1]
 8002bca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	d035      	beq.n	8002c3e <_scanf_i+0x15e>
 8002bd2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8002bd6:	d124      	bne.n	8002c22 <_scanf_i+0x142>
 8002bd8:	0510      	lsls	r0, r2, #20
 8002bda:	d522      	bpl.n	8002c22 <_scanf_i+0x142>
 8002bdc:	f10b 0b01 	add.w	fp, fp, #1
 8002be0:	f1b9 0f00 	cmp.w	r9, #0
 8002be4:	d003      	beq.n	8002bee <_scanf_i+0x10e>
 8002be6:	3301      	adds	r3, #1
 8002be8:	f109 39ff 	add.w	r9, r9, #4294967295
 8002bec:	60a3      	str	r3, [r4, #8]
 8002bee:	6873      	ldr	r3, [r6, #4]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	6073      	str	r3, [r6, #4]
 8002bf6:	dd1b      	ble.n	8002c30 <_scanf_i+0x150>
 8002bf8:	6833      	ldr	r3, [r6, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	6033      	str	r3, [r6, #0]
 8002bfe:	68a3      	ldr	r3, [r4, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60a3      	str	r3, [r4, #8]
 8002c04:	e7d9      	b.n	8002bba <_scanf_i+0xda>
 8002c06:	f1bb 0f02 	cmp.w	fp, #2
 8002c0a:	d1ae      	bne.n	8002b6a <_scanf_i+0x8a>
 8002c0c:	6822      	ldr	r2, [r4, #0]
 8002c0e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8002c12:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002c16:	d1bf      	bne.n	8002b98 <_scanf_i+0xb8>
 8002c18:	2110      	movs	r1, #16
 8002c1a:	6061      	str	r1, [r4, #4]
 8002c1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c20:	e7a2      	b.n	8002b68 <_scanf_i+0x88>
 8002c22:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8002c26:	6022      	str	r2, [r4, #0]
 8002c28:	780b      	ldrb	r3, [r1, #0]
 8002c2a:	f805 3b01 	strb.w	r3, [r5], #1
 8002c2e:	e7de      	b.n	8002bee <_scanf_i+0x10e>
 8002c30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002c34:	4631      	mov	r1, r6
 8002c36:	4650      	mov	r0, sl
 8002c38:	4798      	blx	r3
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	d0df      	beq.n	8002bfe <_scanf_i+0x11e>
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	05d9      	lsls	r1, r3, #23
 8002c42:	d50d      	bpl.n	8002c60 <_scanf_i+0x180>
 8002c44:	42bd      	cmp	r5, r7
 8002c46:	d909      	bls.n	8002c5c <_scanf_i+0x17c>
 8002c48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002c4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002c50:	4632      	mov	r2, r6
 8002c52:	4650      	mov	r0, sl
 8002c54:	4798      	blx	r3
 8002c56:	f105 39ff 	add.w	r9, r5, #4294967295
 8002c5a:	464d      	mov	r5, r9
 8002c5c:	42bd      	cmp	r5, r7
 8002c5e:	d028      	beq.n	8002cb2 <_scanf_i+0x1d2>
 8002c60:	6822      	ldr	r2, [r4, #0]
 8002c62:	f012 0210 	ands.w	r2, r2, #16
 8002c66:	d113      	bne.n	8002c90 <_scanf_i+0x1b0>
 8002c68:	702a      	strb	r2, [r5, #0]
 8002c6a:	6863      	ldr	r3, [r4, #4]
 8002c6c:	9e01      	ldr	r6, [sp, #4]
 8002c6e:	4639      	mov	r1, r7
 8002c70:	4650      	mov	r0, sl
 8002c72:	47b0      	blx	r6
 8002c74:	f8d8 3000 	ldr.w	r3, [r8]
 8002c78:	6821      	ldr	r1, [r4, #0]
 8002c7a:	1d1a      	adds	r2, r3, #4
 8002c7c:	f8c8 2000 	str.w	r2, [r8]
 8002c80:	f011 0f20 	tst.w	r1, #32
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	d00f      	beq.n	8002ca8 <_scanf_i+0x1c8>
 8002c88:	6018      	str	r0, [r3, #0]
 8002c8a:	68e3      	ldr	r3, [r4, #12]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	60e3      	str	r3, [r4, #12]
 8002c90:	6923      	ldr	r3, [r4, #16]
 8002c92:	1bed      	subs	r5, r5, r7
 8002c94:	445d      	add	r5, fp
 8002c96:	442b      	add	r3, r5
 8002c98:	6123      	str	r3, [r4, #16]
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	b007      	add	sp, #28
 8002c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca2:	f04f 0b00 	mov.w	fp, #0
 8002ca6:	e7ca      	b.n	8002c3e <_scanf_i+0x15e>
 8002ca8:	07ca      	lsls	r2, r1, #31
 8002caa:	bf4c      	ite	mi
 8002cac:	8018      	strhmi	r0, [r3, #0]
 8002cae:	6018      	strpl	r0, [r3, #0]
 8002cb0:	e7eb      	b.n	8002c8a <_scanf_i+0x1aa>
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	e7f2      	b.n	8002c9c <_scanf_i+0x1bc>
 8002cb6:	bf00      	nop
 8002cb8:	08002f6c 	.word	0x08002f6c
 8002cbc:	08002f01 	.word	0x08002f01
 8002cc0:	080024c5 	.word	0x080024c5
 8002cc4:	0800309d 	.word	0x0800309d

08002cc8 <__sccl>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	780b      	ldrb	r3, [r1, #0]
 8002ccc:	4604      	mov	r4, r0
 8002cce:	2b5e      	cmp	r3, #94	@ 0x5e
 8002cd0:	bf0b      	itete	eq
 8002cd2:	784b      	ldrbeq	r3, [r1, #1]
 8002cd4:	1c4a      	addne	r2, r1, #1
 8002cd6:	1c8a      	addeq	r2, r1, #2
 8002cd8:	2100      	movne	r1, #0
 8002cda:	bf08      	it	eq
 8002cdc:	2101      	moveq	r1, #1
 8002cde:	3801      	subs	r0, #1
 8002ce0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8002ce4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8002ce8:	42a8      	cmp	r0, r5
 8002cea:	d1fb      	bne.n	8002ce4 <__sccl+0x1c>
 8002cec:	b90b      	cbnz	r3, 8002cf2 <__sccl+0x2a>
 8002cee:	1e50      	subs	r0, r2, #1
 8002cf0:	bd70      	pop	{r4, r5, r6, pc}
 8002cf2:	f081 0101 	eor.w	r1, r1, #1
 8002cf6:	54e1      	strb	r1, [r4, r3]
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002d00:	2d2d      	cmp	r5, #45	@ 0x2d
 8002d02:	d005      	beq.n	8002d10 <__sccl+0x48>
 8002d04:	2d5d      	cmp	r5, #93	@ 0x5d
 8002d06:	d016      	beq.n	8002d36 <__sccl+0x6e>
 8002d08:	2d00      	cmp	r5, #0
 8002d0a:	d0f1      	beq.n	8002cf0 <__sccl+0x28>
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	e7f2      	b.n	8002cf6 <__sccl+0x2e>
 8002d10:	7846      	ldrb	r6, [r0, #1]
 8002d12:	2e5d      	cmp	r6, #93	@ 0x5d
 8002d14:	d0fa      	beq.n	8002d0c <__sccl+0x44>
 8002d16:	42b3      	cmp	r3, r6
 8002d18:	dcf8      	bgt.n	8002d0c <__sccl+0x44>
 8002d1a:	3002      	adds	r0, #2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	3201      	adds	r2, #1
 8002d20:	4296      	cmp	r6, r2
 8002d22:	54a1      	strb	r1, [r4, r2]
 8002d24:	dcfb      	bgt.n	8002d1e <__sccl+0x56>
 8002d26:	1af2      	subs	r2, r6, r3
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	1c5d      	adds	r5, r3, #1
 8002d2c:	42b3      	cmp	r3, r6
 8002d2e:	bfa8      	it	ge
 8002d30:	2200      	movge	r2, #0
 8002d32:	18ab      	adds	r3, r5, r2
 8002d34:	e7e1      	b.n	8002cfa <__sccl+0x32>
 8002d36:	4610      	mov	r0, r2
 8002d38:	e7da      	b.n	8002cf0 <__sccl+0x28>

08002d3a <__submore>:
 8002d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3e:	460c      	mov	r4, r1
 8002d40:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002d42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d46:	4299      	cmp	r1, r3
 8002d48:	d11d      	bne.n	8002d86 <__submore+0x4c>
 8002d4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d4e:	f7ff fabf 	bl	80022d0 <_malloc_r>
 8002d52:	b918      	cbnz	r0, 8002d5c <__submore+0x22>
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002d62:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8002d66:	6360      	str	r0, [r4, #52]	@ 0x34
 8002d68:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8002d6c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002d70:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8002d74:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002d78:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8002d7c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8002d80:	6020      	str	r0, [r4, #0]
 8002d82:	2000      	movs	r0, #0
 8002d84:	e7e8      	b.n	8002d58 <__submore+0x1e>
 8002d86:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8002d88:	0077      	lsls	r7, r6, #1
 8002d8a:	463a      	mov	r2, r7
 8002d8c:	f000 f80f 	bl	8002dae <_realloc_r>
 8002d90:	4605      	mov	r5, r0
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d0de      	beq.n	8002d54 <__submore+0x1a>
 8002d96:	eb00 0806 	add.w	r8, r0, r6
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	4632      	mov	r2, r6
 8002d9e:	4640      	mov	r0, r8
 8002da0:	f7ff fc20 	bl	80025e4 <memcpy>
 8002da4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8002da8:	f8c4 8000 	str.w	r8, [r4]
 8002dac:	e7e9      	b.n	8002d82 <__submore+0x48>

08002dae <_realloc_r>:
 8002dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db2:	4680      	mov	r8, r0
 8002db4:	4615      	mov	r5, r2
 8002db6:	460c      	mov	r4, r1
 8002db8:	b921      	cbnz	r1, 8002dc4 <_realloc_r+0x16>
 8002dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	f7ff ba86 	b.w	80022d0 <_malloc_r>
 8002dc4:	b92a      	cbnz	r2, 8002dd2 <_realloc_r+0x24>
 8002dc6:	f7ff fc1b 	bl	8002600 <_free_r>
 8002dca:	2400      	movs	r4, #0
 8002dcc:	4620      	mov	r0, r4
 8002dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dd2:	f000 f897 	bl	8002f04 <_malloc_usable_size_r>
 8002dd6:	4285      	cmp	r5, r0
 8002dd8:	4606      	mov	r6, r0
 8002dda:	d802      	bhi.n	8002de2 <_realloc_r+0x34>
 8002ddc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002de0:	d8f4      	bhi.n	8002dcc <_realloc_r+0x1e>
 8002de2:	4629      	mov	r1, r5
 8002de4:	4640      	mov	r0, r8
 8002de6:	f7ff fa73 	bl	80022d0 <_malloc_r>
 8002dea:	4607      	mov	r7, r0
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d0ec      	beq.n	8002dca <_realloc_r+0x1c>
 8002df0:	42b5      	cmp	r5, r6
 8002df2:	462a      	mov	r2, r5
 8002df4:	4621      	mov	r1, r4
 8002df6:	bf28      	it	cs
 8002df8:	4632      	movcs	r2, r6
 8002dfa:	f7ff fbf3 	bl	80025e4 <memcpy>
 8002dfe:	4621      	mov	r1, r4
 8002e00:	4640      	mov	r0, r8
 8002e02:	f7ff fbfd 	bl	8002600 <_free_r>
 8002e06:	463c      	mov	r4, r7
 8002e08:	e7e0      	b.n	8002dcc <_realloc_r+0x1e>
	...

08002e0c <_strtol_l.constprop.0>:
 8002e0c:	2b24      	cmp	r3, #36	@ 0x24
 8002e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e12:	4686      	mov	lr, r0
 8002e14:	4690      	mov	r8, r2
 8002e16:	d801      	bhi.n	8002e1c <_strtol_l.constprop.0+0x10>
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <_strtol_l.constprop.0+0x1e>
 8002e1c:	f7ff fbb6 	bl	800258c <__errno>
 8002e20:	2316      	movs	r3, #22
 8002e22:	6003      	str	r3, [r0, #0]
 8002e24:	2000      	movs	r0, #0
 8002e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e2a:	4834      	ldr	r0, [pc, #208]	@ (8002efc <_strtol_l.constprop.0+0xf0>)
 8002e2c:	460d      	mov	r5, r1
 8002e2e:	462a      	mov	r2, r5
 8002e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e34:	5d06      	ldrb	r6, [r0, r4]
 8002e36:	f016 0608 	ands.w	r6, r6, #8
 8002e3a:	d1f8      	bne.n	8002e2e <_strtol_l.constprop.0+0x22>
 8002e3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8002e3e:	d12d      	bne.n	8002e9c <_strtol_l.constprop.0+0x90>
 8002e40:	782c      	ldrb	r4, [r5, #0]
 8002e42:	2601      	movs	r6, #1
 8002e44:	1c95      	adds	r5, r2, #2
 8002e46:	f033 0210 	bics.w	r2, r3, #16
 8002e4a:	d109      	bne.n	8002e60 <_strtol_l.constprop.0+0x54>
 8002e4c:	2c30      	cmp	r4, #48	@ 0x30
 8002e4e:	d12a      	bne.n	8002ea6 <_strtol_l.constprop.0+0x9a>
 8002e50:	782a      	ldrb	r2, [r5, #0]
 8002e52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002e56:	2a58      	cmp	r2, #88	@ 0x58
 8002e58:	d125      	bne.n	8002ea6 <_strtol_l.constprop.0+0x9a>
 8002e5a:	786c      	ldrb	r4, [r5, #1]
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	3502      	adds	r5, #2
 8002e60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8002e64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002e68:	2200      	movs	r2, #0
 8002e6a:	fbbc f9f3 	udiv	r9, ip, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	fb03 ca19 	mls	sl, r3, r9, ip
 8002e74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8002e78:	2f09      	cmp	r7, #9
 8002e7a:	d81b      	bhi.n	8002eb4 <_strtol_l.constprop.0+0xa8>
 8002e7c:	463c      	mov	r4, r7
 8002e7e:	42a3      	cmp	r3, r4
 8002e80:	dd27      	ble.n	8002ed2 <_strtol_l.constprop.0+0xc6>
 8002e82:	1c57      	adds	r7, r2, #1
 8002e84:	d007      	beq.n	8002e96 <_strtol_l.constprop.0+0x8a>
 8002e86:	4581      	cmp	r9, r0
 8002e88:	d320      	bcc.n	8002ecc <_strtol_l.constprop.0+0xc0>
 8002e8a:	d101      	bne.n	8002e90 <_strtol_l.constprop.0+0x84>
 8002e8c:	45a2      	cmp	sl, r4
 8002e8e:	db1d      	blt.n	8002ecc <_strtol_l.constprop.0+0xc0>
 8002e90:	fb00 4003 	mla	r0, r0, r3, r4
 8002e94:	2201      	movs	r2, #1
 8002e96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e9a:	e7eb      	b.n	8002e74 <_strtol_l.constprop.0+0x68>
 8002e9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8002e9e:	bf04      	itt	eq
 8002ea0:	782c      	ldrbeq	r4, [r5, #0]
 8002ea2:	1c95      	addeq	r5, r2, #2
 8002ea4:	e7cf      	b.n	8002e46 <_strtol_l.constprop.0+0x3a>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1da      	bne.n	8002e60 <_strtol_l.constprop.0+0x54>
 8002eaa:	2c30      	cmp	r4, #48	@ 0x30
 8002eac:	bf0c      	ite	eq
 8002eae:	2308      	moveq	r3, #8
 8002eb0:	230a      	movne	r3, #10
 8002eb2:	e7d5      	b.n	8002e60 <_strtol_l.constprop.0+0x54>
 8002eb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002eb8:	2f19      	cmp	r7, #25
 8002eba:	d801      	bhi.n	8002ec0 <_strtol_l.constprop.0+0xb4>
 8002ebc:	3c37      	subs	r4, #55	@ 0x37
 8002ebe:	e7de      	b.n	8002e7e <_strtol_l.constprop.0+0x72>
 8002ec0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002ec4:	2f19      	cmp	r7, #25
 8002ec6:	d804      	bhi.n	8002ed2 <_strtol_l.constprop.0+0xc6>
 8002ec8:	3c57      	subs	r4, #87	@ 0x57
 8002eca:	e7d8      	b.n	8002e7e <_strtol_l.constprop.0+0x72>
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	e7e1      	b.n	8002e96 <_strtol_l.constprop.0+0x8a>
 8002ed2:	1c53      	adds	r3, r2, #1
 8002ed4:	d108      	bne.n	8002ee8 <_strtol_l.constprop.0+0xdc>
 8002ed6:	2322      	movs	r3, #34	@ 0x22
 8002ed8:	f8ce 3000 	str.w	r3, [lr]
 8002edc:	4660      	mov	r0, ip
 8002ede:	f1b8 0f00 	cmp.w	r8, #0
 8002ee2:	d0a0      	beq.n	8002e26 <_strtol_l.constprop.0+0x1a>
 8002ee4:	1e69      	subs	r1, r5, #1
 8002ee6:	e006      	b.n	8002ef6 <_strtol_l.constprop.0+0xea>
 8002ee8:	b106      	cbz	r6, 8002eec <_strtol_l.constprop.0+0xe0>
 8002eea:	4240      	negs	r0, r0
 8002eec:	f1b8 0f00 	cmp.w	r8, #0
 8002ef0:	d099      	beq.n	8002e26 <_strtol_l.constprop.0+0x1a>
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d1f6      	bne.n	8002ee4 <_strtol_l.constprop.0+0xd8>
 8002ef6:	f8c8 1000 	str.w	r1, [r8]
 8002efa:	e794      	b.n	8002e26 <_strtol_l.constprop.0+0x1a>
 8002efc:	08002f89 	.word	0x08002f89

08002f00 <_strtol_r>:
 8002f00:	f7ff bf84 	b.w	8002e0c <_strtol_l.constprop.0>

08002f04 <_malloc_usable_size_r>:
 8002f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f08:	1f18      	subs	r0, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfbc      	itt	lt
 8002f0e:	580b      	ldrlt	r3, [r1, r0]
 8002f10:	18c0      	addlt	r0, r0, r3
 8002f12:	4770      	bx	lr

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
